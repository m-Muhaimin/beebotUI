{"file_contents":{"README.md":{"content":"# beebotUI\nA chat bot with modern UI\n\n\n<img width=\"1891\" height=\"905\" alt=\"image\" src=\"https://github.com/user-attachments/assets/a77253c2-b567-450e-8b70-7f8c73b5a10c\" />\n\n","size_bytes":172},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"exa-py>=1.14.20\",\n    \"httpx>=0.28.1\",\n]\n","size_bytes":188},"replit.md":{"content":"# Overview\n\nBeeBot is an AI assistant platform built as a modern full-stack web application with complete user authentication. The project serves as an intelligent conversation partner designed to help users with creative writing, data analysis, learning, and programming assistance. The application features a clean, user-friendly interface with a sidebar navigation system, user authentication, and a main chat interface for interacting with the AI assistant.\n\n## Recent Changes (August 2025)\n\n- **Migration to Replit Environment**: Successfully migrated from Replit Agent to standard Replit environment\n- **Database Configuration**: Fixed PostgreSQL connection issues and properly configured database access\n- **Authentication System**: Implemented complete user signup/login system with PostgreSQL storage\n- **UI Enhancement**: Added beautiful authentication pages with light background (#5239cc12) and soft borders\n- **Security**: Added bcrypt password hashing and session-based authentication\n- **Protected Routes**: All conversation features now require user authentication\n- **User Profile**: Dynamic user profile display in sidebar with logout functionality and improved truncation\n- **Input Section Improvements**: Applied precise styling with specific padding (pt-[30px] pb-[30px] pl-[20px] pr-[20px])\n- **Tool Selection**: Added interactive tool selection buttons inside input field with active states\n- **Chat Enhancement**: Implemented proper markdown rendering for structured chat output\n- **Responsive Design**: Fine-tuned component spacing and button styling throughout the interface\n- **Error Handling**: Fixed server error handling to prevent \"headers already sent\" issues\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built using **React 18** with **TypeScript** and follows a modern component-based architecture:\n\n- **UI Framework**: Uses shadcn/ui component library built on top of Radix UI primitives for consistent, accessible components\n- **Styling**: Tailwind CSS with a custom design system including CSS variables for theming and brand colors\n- **Routing**: Client-side routing implemented with Wouter for lightweight navigation\n- **State Management**: React Query (TanStack Query) for server state management and data fetching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\nThe component structure follows atomic design principles with reusable UI components in the `/components/ui` directory and feature-specific components like `Sidebar`, `InputSection`, and `ConversationHistory`.\n\n## Backend Architecture\n\nThe backend uses **Express.js** with **TypeScript** in an ESM configuration:\n\n- **Server Framework**: Express.js with middleware for JSON parsing, CORS handling, and request logging\n- **Development Setup**: Custom Vite integration for hot module replacement in development\n- **API Structure**: RESTful API design with routes prefixed under `/api`\n- **Error Handling**: Centralized error handling middleware for consistent error responses\n- **Build Process**: esbuild for fast production bundling with external package handling\n\nThe server architecture is modular with separate files for routes (`routes.ts`) and storage interfaces (`storage.ts`).\n\n## Data Storage Solutions\n\nThe application uses a **Supabase PostgreSQL** database with **Drizzle ORM**:\n\n- **Database**: Supabase PostgreSQL as the primary database (serverless PostgreSQL platform)\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Migrations**: Drizzle Kit for database schema migrations stored in `/migrations`\n- **Schema**: Centralized schema definitions in `/shared/schema.ts` with Zod validation\n- **Connection**: Direct PostgreSQL connection via Drizzle with Supabase connection string\n\nImplements conversation and message schemas for AI chat functionality with UUID primary keys and proper relationships.\n\n## Authentication and Authorization\n\nComplete authentication system implemented with modern security practices:\n\n- **User Model**: Enhanced schema with email, username, password, firstName, lastName, and profile fields\n- **Password Security**: bcrypt hashing with salt rounds for secure password storage\n- **Session Management**: PostgreSQL session storage using connect-pg-simple with 1-week TTL\n- **Authentication Routes**: /api/auth/signup, /api/auth/login, /api/auth/logout, /api/auth/me\n- **Protected Routes**: All conversation and chat endpoints require authentication\n- **Frontend Integration**: React hooks (useAuth, useSignup, useLogin, useLogout) for seamless UI integration\n- **UI Components**: Beautiful signup/login page based on modern blue gradient design with form validation\n\nThe system includes automatic session refresh, error handling, and proper client-server separation for security.\n\n## Development and Deployment\n\n- **Development**: Concurrent development server setup with Vite frontend and Express backend\n- **TypeScript**: Strict TypeScript configuration with path mapping for clean imports\n- **Code Quality**: ESLint and Prettier configuration implied through component structure\n- **Replit Integration**: Custom Replit-specific plugins for development environment integration\n\n# External Dependencies\n\n## Database Services\n- **Supabase**: Serverless PostgreSQL database platform with real-time capabilities and built-in authentication\n- **Drizzle ORM**: Modern TypeScript ORM for database operations and schema management\n\n## UI and Component Libraries\n- **Radix UI**: Headless UI primitives for building accessible components (dialogs, dropdowns, forms, etc.)\n- **shadcn/ui**: Pre-built component library built on Radix UI with Tailwind CSS styling\n- **Lucide React**: Icon library providing consistent iconography throughout the application\n\n## Development and Build Tools\n- **Vite**: Frontend build tool and development server with React plugin support\n- **esbuild**: Fast JavaScript bundler for production backend builds\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins\n\n## Utility Libraries\n- **TanStack React Query**: Server state management and data fetching library\n- **React Hook Form**: Form state management with validation support\n- **Zod**: TypeScript-first schema validation library\n- **date-fns**: Date utility library for date manipulation and formatting\n- **class-variance-authority**: Utility for creating component variants with Tailwind CSS\n- **clsx**: Utility for conditional CSS class concatenation\n\n## Replit Platform Integration\n- **Replit Development Tools**: Custom Vite plugins for Replit environment integration and error overlay functionality","size_bytes":6790},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        // BeeBot custom colors\n        \"brand-blue\": \"var(--brand-blue)\",\n        \"brand-purple\": \"var(--brand-purple)\",\n        slate: {\n          50: \"var(--slate-50)\",\n          100: \"var(--slate-100)\",\n          200: \"var(--slate-200)\",\n          400: \"var(--slate-400)\",\n          500: \"var(--slate-500)\",\n          600: \"var(--slate-600)\",\n          700: \"var(--slate-700)\",\n          800: \"var(--slate-800)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2759},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"weather_server.py":{"content":"#!/usr/bin/env python3\nimport json\nimport sys\nimport asyncio\nimport httpx\nfrom typing import Any, Dict\n\n# Weather tools implementation\nclass WeatherTools:\n    NWS_API_BASE = \"https://api.weather.gov\"\n    USER_AGENT = \"weather-app/1.0\"\n    \n    async def make_nws_request(self, url: str) -> Dict[str, Any] | None:\n        \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n        headers = {\n            \"User-Agent\": self.USER_AGENT,\n            \"Accept\": \"application/geo+json\"\n        }\n        async with httpx.AsyncClient() as client:\n            try:\n                response = await client.get(url, headers=headers, timeout=30.0)\n                response.raise_for_status()\n                return response.json()\n            except Exception:\n                return None\n\n    def format_alert(self, feature: dict) -> str:\n        \"\"\"Format an alert feature into a readable string.\"\"\"\n        props = feature[\"properties\"]\n        return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n\n    async def get_alerts(self, state: str) -> str:\n        \"\"\"Get weather alerts for a US state.\"\"\"\n        url = f\"{self.NWS_API_BASE}/alerts/active/area/{state}\"\n        data = await self.make_nws_request(url)\n\n        if not data or \"features\" not in data:\n            return \"Unable to fetch alerts or no alerts found.\"\n\n        if not data[\"features\"]:\n            return \"No active alerts for this state.\"\n\n        alerts = [self.format_alert(feature) for feature in data[\"features\"]]\n        return \"\\n---\\n\".join(alerts)\n\n    async def get_forecast(self, latitude: float, longitude: float) -> str:\n        \"\"\"Get weather forecast for a location.\"\"\"\n        points_url = f\"{self.NWS_API_BASE}/points/{latitude},{longitude}\"\n        points_data = await self.make_nws_request(points_url)\n\n        if not points_data:\n            return \"Unable to fetch forecast data for this location.\"\n\n        forecast_url = points_data[\"properties\"][\"forecast\"]\n        forecast_data = await self.make_nws_request(forecast_url)\n\n        if not forecast_data:\n            return \"Unable to fetch detailed forecast.\"\n\n        periods = forecast_data[\"properties\"][\"periods\"]\n        forecasts = []\n        for period in periods[:5]:\n            forecast = f\"\"\"\n{period['name']}:\nTemperature: {period['temperature']}°{period['temperatureUnit']}\nWind: {period['windSpeed']} {period['windDirection']}\nForecast: {period['detailedForecast']}\n\"\"\"\n            forecasts.append(forecast)\n\n        return \"\\n---\\n\".join(forecasts)\n\n    async def get_weather_by_city(self, city: str) -> str:\n        \"\"\"Get weather forecast for a city by name.\"\"\"\n        city_coords = {\n            \"new york\": (40.7831, -73.9712),\n            \"san francisco\": (37.7749, -122.4194),\n            \"los angeles\": (34.0522, -118.2437),\n            \"chicago\": (41.8781, -87.6298),\n            \"houston\": (29.7604, -95.3698),\n            \"miami\": (25.7617, -80.1918),\n            \"seattle\": (47.6062, -122.3321),\n            \"denver\": (39.7392, -104.9903),\n            \"atlanta\": (33.7490, -84.3880),\n            \"boston\": (42.3601, -71.0589),\n            \"dhaka\": (23.8103, 90.4125),\n            \"washington\": (38.9072, -77.0369),\n            \"philadelphia\": (39.9526, -75.1652),\n            \"phoenix\": (33.4484, -112.0740),\n            \"las vegas\": (36.1699, -115.1398)\n        }\n        \n        city_lower = city.lower().strip()\n        \n        if city_lower in city_coords:\n            lat, lon = city_coords[city_lower]\n            return await self.get_forecast(lat, lon)\n        else:\n            return f\"Sorry, I don't have coordinates for '{city}'. Available cities: {', '.join(city_coords.keys())}\"\n\n# MCP Server implementation\nclass MCPServer:\n    def __init__(self):\n        self.weather = WeatherTools()\n        self.tools = {\n            \"get_forecast\": {\n                \"name\": \"get_forecast\",\n                \"description\": \"Get weather forecast for a location using latitude and longitude coordinates\",\n                \"inputSchema\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"latitude\": {\"type\": \"number\", \"description\": \"Latitude of the location\"},\n                        \"longitude\": {\"type\": \"number\", \"description\": \"Longitude of the location\"}\n                    },\n                    \"required\": [\"latitude\", \"longitude\"]\n                }\n            },\n            \"get_weather_by_city\": {\n                \"name\": \"get_weather_by_city\",\n                \"description\": \"Get weather forecast for a city by name (supports major US cities and Dhaka)\",\n                \"inputSchema\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"city\": {\"type\": \"string\", \"description\": \"Name of the city (e.g., 'New York', 'San Francisco', 'Dhaka')\"}\n                    },\n                    \"required\": [\"city\"]\n                }\n            },\n            \"get_alerts\": {\n                \"name\": \"get_alerts\",\n                \"description\": \"Get weather alerts for a US state\",\n                \"inputSchema\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"state\": {\"type\": \"string\", \"description\": \"Two-letter US state code (e.g., 'CA', 'NY')\"}\n                    },\n                    \"required\": [\"state\"]\n                }\n            }\n        }\n\n    async def handle_request(self, request):\n        method = request.get(\"method\")\n        params = request.get(\"params\", {})\n        \n        if method == \"tools/list\":\n            return {\"tools\": list(self.tools.values())}\n        \n        elif method == \"tools/call\":\n            tool_name = params.get(\"name\")\n            arguments = params.get(\"arguments\", {})\n            \n            if tool_name == \"get_forecast\":\n                result = await self.weather.get_forecast(arguments[\"latitude\"], arguments[\"longitude\"])\n            elif tool_name == \"get_weather_by_city\":\n                result = await self.weather.get_weather_by_city(arguments[\"city\"])\n            elif tool_name == \"get_alerts\":\n                result = await self.weather.get_alerts(arguments[\"state\"])\n            else:\n                return {\"error\": {\"code\": -32601, \"message\": f\"Unknown tool: {tool_name}\"}}\n            \n            return {\"content\": [{\"type\": \"text\", \"text\": result}]}\n        \n        else:\n            return {\"error\": {\"code\": -32601, \"message\": f\"Unknown method: {method}\"}}\n\nasync def main():\n    server = MCPServer()\n    \n    while True:\n        try:\n            line = input()\n            if not line.strip():\n                continue\n                \n            request = json.loads(line)\n            result = await server.handle_request(request)\n            \n            response = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": request.get(\"id\"),\n                \"result\": result\n            }\n            \n            print(json.dumps(response))\n            sys.stdout.flush()\n            \n        except EOFError:\n            break\n        except Exception as e:\n            error_response = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": request.get(\"id\") if 'request' in locals() else None,\n                \"error\": {\"code\": -32000, \"message\": str(e)}\n            }\n            print(json.dumps(error_response))\n            sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n","size_bytes":7671},"attached_assets/README (1)_1754826574433.md":{"content":"<div align=\"center\">\n\n<!-- omit in toc -->\n# FastMCP v2 🚀\n\n<strong>The fast, Pythonic way to build MCP servers and clients.</strong>\n\n*Made with ☕️ by [Prefect](https://www.prefect.io/)*\n\n[![Docs](https://img.shields.io/badge/docs-gofastmcp.com-blue)](https://gofastmcp.com)\n[![PyPI - Version](https://img.shields.io/pypi/v/fastmcp.svg)](https://pypi.org/project/fastmcp)\n[![Tests](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg)](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml)\n[![License](https://img.shields.io/github/license/jlowin/fastmcp.svg)](https://github.com/jlowin/fastmcp/blob/main/LICENSE)\n\n<a href=\"https://trendshift.io/repositories/13266\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/13266\" alt=\"jlowin%2Ffastmcp | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</div>\n\n> [!Note]\n>\n> #### Beyond the Protocol\n>\n> FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the [official MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) in 2024.\n>\n> This is FastMCP 2.0, the **actively maintained version** that provides a complete toolkit for working with the MCP ecosystem.\n>\n> FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing **the simplest path to production**. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more.\n>\n> Ready to upgrade or get started? Follow the [installation instructions](https://gofastmcp.com/getting-started/installation), which include steps for upgrading from the official MCP SDK.\n\n---\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code.\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo 🚀\")\n\n@mcp.tool\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\nRun the server locally:\n\n```bash\nfastmcp run server.py\n```\n\n### 📚 Documentation\n\nFastMCP's complete documentation is available at **[gofastmcp.com](https://gofastmcp.com)**, including detailed guides, API references, and advanced patterns. This readme provides only a high-level overview.\n\nDocumentation is also available in [llms.txt format](https://llmstxt.org/), which is a simple markdown standard that LLMs can consume easily.\n\nThere are two ways to access the LLM-friendly documentation:\n\n- [`llms.txt`](https://gofastmcp.com/llms.txt) is essentially a sitemap, listing all the pages in the documentation.\n- [`llms-full.txt`](https://gofastmcp.com/llms-full.txt) contains the entire documentation. Note this may exceed the context window of your LLM.\n\n---\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [What is MCP?](#what-is-mcp)\n- [Why FastMCP?](#why-fastmcp)\n- [Installation](#installation)\n- [Core Concepts](#core-concepts)\n  - [The `FastMCP` Server](#the-fastmcp-server)\n  - [Tools](#tools)\n  - [Resources \\& Templates](#resources--templates)\n  - [Prompts](#prompts)\n  - [Context](#context)\n  - [MCP Clients](#mcp-clients)\n- [Advanced Features](#advanced-features)\n  - [Proxy Servers](#proxy-servers)\n  - [Composing MCP Servers](#composing-mcp-servers)\n  - [OpenAPI \\& FastAPI Generation](#openapi--fastapi-generation)\n  - [Authentication \\& Security](#authentication--security)\n- [Running Your Server](#running-your-server)\n- [Contributing](#contributing)\n  - [Prerequisites](#prerequisites)\n  - [Setup](#setup)\n  - [Unit Tests](#unit-tests)\n  - [Static Checks](#static-checks)\n  - [Pull Requests](#pull-requests)\n\n---\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as \"the USB-C port for AI\", providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can:\n\n- Expose data through **Resources** (think of these sort of like GET endpoints; they are used to load information into the LLM's context)\n- Provide functionality through **Tools** (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)\n- Define interaction patterns through **Prompts** (reusable templates for LLM interactions)\n- And more!\n\nFastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers.\n\n## Why FastMCP?\n\nThe MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need.\n\nFastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities (and is now part of the official MCP SDK), 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns.\n\nFastMCP aims to be:\n\n🚀 **Fast:** High-level interface means less code and faster development\n\n🍀 **Simple:** Build MCP servers with minimal boilerplate\n\n🐍 **Pythonic:** Feels natural to Python developers\n\n🔍 **Complete:** A comprehensive platform for all MCP use cases, from dev to prod\n\n## Installation\n\nWe recommend installing FastMCP with [uv](https://docs.astral.sh/uv/):\n\n```bash\nuv pip install fastmcp\n```\n\nFor full installation instructions, including verification, upgrading from the official MCPSDK, and developer setup, see the [**Installation Guide**](https://gofastmcp.com/getting-started/installation).\n\n## Core Concepts\n\nThese are the building blocks for creating MCP servers and clients with FastMCP.\n\n### The `FastMCP` Server\n\nThe central object representing your MCP application. It holds your tools, resources, and prompts, manages connections, and can be configured with settings like authentication.\n\n```python\nfrom fastmcp import FastMCP\n\n# Create a server instance\nmcp = FastMCP(name=\"MyAssistantServer\")\n```\n\nLearn more in the [**FastMCP Server Documentation**](https://gofastmcp.com/servers/fastmcp).\n\n### Tools\n\nTools allow LLMs to perform actions by executing your Python functions (sync or async). Ideal for computations, API calls, or side effects (like `POST`/`PUT`). FastMCP handles schema generation from type hints and docstrings. Tools can return various types, including text, JSON-serializable objects, and even images or audio aided by the FastMCP media helper classes.\n\n```python\n@mcp.tool\ndef multiply(a: float, b: float) -> float:\n    \"\"\"Multiplies two numbers.\"\"\"\n    return a * b\n```\n\nLearn more in the [**Tools Documentation**](https://gofastmcp.com/servers/tools).\n\n### Resources & Templates\n\nResources expose read-only data sources (like `GET` requests). Use `@mcp.resource(\"your://uri\")`. Use `{placeholders}` in the URI to create dynamic templates that accept parameters, allowing clients to request specific data subsets.\n\n```python\n# Static resource\n@mcp.resource(\"config://version\")\ndef get_version(): \n    return \"2.0.1\"\n\n# Dynamic resource template\n@mcp.resource(\"users://{user_id}/profile\")\ndef get_profile(user_id: int):\n    # Fetch profile for user_id...\n    return {\"name\": f\"User {user_id}\", \"status\": \"active\"}\n```\n\nLearn more in the [**Resources & Templates Documentation**](https://gofastmcp.com/servers/resources).\n\n### Prompts\n\nPrompts define reusable message templates to guide LLM interactions. Decorate functions with `@mcp.prompt`. Return strings or `Message` objects.\n\n```python\n@mcp.prompt\ndef summarize_request(text: str) -> str:\n    \"\"\"Generate a prompt asking for a summary.\"\"\"\n    return f\"Please summarize the following text:\\n\\n{text}\"\n```\n\nLearn more in the [**Prompts Documentation**](https://gofastmcp.com/servers/prompts).\n\n### Context\n\nAccess MCP session capabilities within your tools, resources, or prompts by adding a `ctx: Context` parameter. Context provides methods for:\n\n- **Logging:** Log messages to MCP clients with `ctx.info()`, `ctx.error()`, etc.\n- **LLM Sampling:** Use `ctx.sample()` to request completions from the client's LLM.\n- **HTTP Request:** Use `ctx.http_request()` to make HTTP requests to other servers.\n- **Resource Access:** Use `ctx.read_resource()` to access resources on the server\n- **Progress Reporting:** Use `ctx.report_progress()` to report progress to the client.\n- and more...\n\nTo access the context, add a parameter annotated as `Context` to any mcp-decorated function. FastMCP will automatically inject the correct context object when the function is called.\n\n```python\nfrom fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"My MCP Server\")\n\n@mcp.tool\nasync def process_data(uri: str, ctx: Context):\n    # Log a message to the client\n    await ctx.info(f\"Processing {uri}...\")\n\n    # Read a resource from the server\n    data = await ctx.read_resource(uri)\n\n    # Ask client LLM to summarize the data\n    summary = await ctx.sample(f\"Summarize: {data.content[:500]}\")\n\n    # Return the summary\n    return summary.text\n```\n\nLearn more in the [**Context Documentation**](https://gofastmcp.com/servers/context).\n\n### MCP Clients\n\nInteract with *any* MCP server programmatically using the `fastmcp.Client`. It supports various transports (Stdio, SSE, In-Memory) and often auto-detects the correct one. The client can also handle advanced patterns like server-initiated **LLM sampling requests** if you provide an appropriate handler.\n\nCritically, the client allows for efficient **in-memory testing** of your servers by connecting directly to a `FastMCP` server instance via the `FastMCPTransport`, eliminating the need for process management or network calls during tests.\n\n```python\nfrom fastmcp import Client\n\nasync def main():\n    # Connect via stdio to a local script\n    async with Client(\"my_server.py\") as client:\n        tools = await client.list_tools()\n        print(f\"Available tools: {tools}\")\n        result = await client.call_tool(\"add\", {\"a\": 5, \"b\": 3})\n        print(f\"Result: {result.text}\")\n\n    # Connect via SSE\n    async with Client(\"http://localhost:8000/sse\") as client:\n        # ... use the client\n        pass\n```\n\nTo use clients to test servers, use the following pattern:\n\n```python\nfrom fastmcp import FastMCP, Client\n\nmcp = FastMCP(\"My MCP Server\")\n\nasync def main():\n    # Connect via in-memory transport\n    async with Client(mcp) as client:\n        # ... use the client\n```\n\nFastMCP also supports connecting to multiple servers through a single unified client using the standard MCP configuration format:\n\n```python\nfrom fastmcp import Client\n\n# Standard MCP configuration with multiple servers\nconfig = {\n    \"mcpServers\": {\n        \"weather\": {\"url\": \"https://weather-api.example.com/mcp\"},\n        \"assistant\": {\"command\": \"python\", \"args\": [\"./assistant_server.py\"]}\n    }\n}\n\n# Create a client that connects to all servers\nclient = Client(config)\n\nasync def main():\n    async with client:\n        # Access tools and resources with server prefixes\n        forecast = await client.call_tool(\"weather_get_forecast\", {\"city\": \"London\"})\n        answer = await client.call_tool(\"assistant_answer_question\", {\"query\": \"What is MCP?\"})\n```\n\nLearn more in the [**Client Documentation**](https://gofastmcp.com/clients/client) and [**Transports Documentation**](https://gofastmcp.com/clients/transports).\n\n## Advanced Features\n\nFastMCP introduces powerful ways to structure and deploy your MCP applications.\n\n### Proxy Servers\n\nCreate a FastMCP server that acts as an intermediary for another local or remote MCP server using `FastMCP.as_proxy()`. This is especially useful for bridging transports (e.g., remote SSE to local Stdio) or adding a layer of logic to a server you don't control.\n\nLearn more in the [**Proxying Documentation**](https://gofastmcp.com/patterns/proxy).\n\n### Composing MCP Servers\n\nBuild modular applications by mounting multiple `FastMCP` instances onto a parent server using `mcp.mount()` (live link) or `mcp.import_server()` (static copy).\n\nLearn more in the [**Composition Documentation**](https://gofastmcp.com/patterns/composition).\n\n### OpenAPI & FastAPI Generation\n\nAutomatically generate FastMCP servers from existing OpenAPI specifications (`FastMCP.from_openapi()`) or FastAPI applications (`FastMCP.from_fastapi()`), instantly bringing your web APIs to the MCP ecosystem.\n\nLearn more: [**OpenAPI Integration**](https://gofastmcp.com/integrations/openapi) | [**FastAPI Integration**](https://gofastmcp.com/integrations/fastapi).\n\n### Authentication & Security\n\nFastMCP provides built-in authentication support to secure both your MCP servers and clients in production environments. Protect your server endpoints from unauthorized access and authenticate your clients against secured MCP servers using industry-standard protocols.\n\n- **Server Protection**: Secure your FastMCP server endpoints with configurable authentication providers\n- **Client Authentication**: Connect to authenticated MCP servers with automatic credential management\n- **Production Ready**: Support for common authentication patterns used in enterprise environments\n\nLearn more in the **Authentication Documentation** for [servers](https://gofastmcp.com/servers/auth) and [clients](https://gofastmcp.com/clients/auth).\n\n## Running Your Server\n\nThe main way to run a FastMCP server is by calling the `run()` method on your server instance:\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo 🚀\")\n\n@mcp.tool\ndef hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    mcp.run()  # Default: uses STDIO transport\n```\n\nFastMCP supports three transport protocols:\n\n**STDIO (Default)**: Best for local tools and command-line scripts.\n\n```python\nmcp.run(transport=\"stdio\")  # Default, so transport argument is optional\n```\n\n**Streamable HTTP**: Recommended for web deployments.\n\n```python\nmcp.run(transport=\"http\", host=\"127.0.0.1\", port=8000, path=\"/mcp\")\n```\n\n**SSE**: For compatibility with existing SSE clients.\n\n```python\nmcp.run(transport=\"sse\", host=\"127.0.0.1\", port=8000)\n```\n\nSee the [**Running Server Documentation**](https://gofastmcp.com/deployment/running-server) for more details.\n\n## Contributing\n\nContributions are the core of open source! We welcome improvements and features.\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://docs.astral.sh/uv/) (Recommended for environment management)\n\n### Setup\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/jlowin/fastmcp.git \n   cd fastmcp\n   ```\n\n2. Create and sync the environment:\n\n   ```bash\n   uv sync\n   ```\n\n   This installs all dependencies, including dev tools.\n\n3. Activate the virtual environment (e.g., `source .venv/bin/activate` or via your IDE).\n\n### Unit Tests\n\nFastMCP has a comprehensive unit test suite. All PRs must introduce or update tests as appropriate and pass the full suite.\n\nRun tests using pytest:\n\n```bash\npytest\n```\n\nor if you want an overview of the code coverage\n\n```bash\nuv run pytest --cov=src --cov=examples --cov-report=html\n```\n\n### Static Checks\n\nFastMCP uses `pre-commit` for code formatting, linting, and type-checking. All PRs must pass these checks (they run automatically in CI).\n\nInstall the hooks locally:\n\n```bash\nuv run pre-commit install\n```\n\nThe hooks will now run automatically on `git commit`. You can also run them manually at any time:\n\n```bash\npre-commit run --all-files\n# or via uv\nuv run pre-commit run --all-files\n```\n\n### Pull Requests\n\n1. Fork the repository on GitHub.\n2. Create a feature branch from `main`.\n3. Make your changes, including tests and documentation updates.\n4. Ensure tests and pre-commit hooks pass.\n5. Commit your changes and push to your fork.\n6. Open a pull request against the `main` branch of `jlowin/fastmcp`.\n\nPlease open an issue or discussion for questions or suggestions before starting significant work!\n","size_bytes":16542},"attached_assets/README (1)_1754829977795.md":{"content":"<div align=\"center\">\n\n<!-- omit in toc -->\n# FastMCP v2 🚀\n\n<strong>The fast, Pythonic way to build MCP servers and clients.</strong>\n\n*Made with ☕️ by [Prefect](https://www.prefect.io/)*\n\n[![Docs](https://img.shields.io/badge/docs-gofastmcp.com-blue)](https://gofastmcp.com)\n[![PyPI - Version](https://img.shields.io/pypi/v/fastmcp.svg)](https://pypi.org/project/fastmcp)\n[![Tests](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg)](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml)\n[![License](https://img.shields.io/github/license/jlowin/fastmcp.svg)](https://github.com/jlowin/fastmcp/blob/main/LICENSE)\n\n<a href=\"https://trendshift.io/repositories/13266\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/13266\" alt=\"jlowin%2Ffastmcp | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</div>\n\n> [!Note]\n>\n> #### Beyond the Protocol\n>\n> FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the [official MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) in 2024.\n>\n> This is FastMCP 2.0, the **actively maintained version** that provides a complete toolkit for working with the MCP ecosystem.\n>\n> FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing **the simplest path to production**. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more.\n>\n> Ready to upgrade or get started? Follow the [installation instructions](https://gofastmcp.com/getting-started/installation), which include steps for upgrading from the official MCP SDK.\n\n---\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code.\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo 🚀\")\n\n@mcp.tool\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\nRun the server locally:\n\n```bash\nfastmcp run server.py\n```\n\n### 📚 Documentation\n\nFastMCP's complete documentation is available at **[gofastmcp.com](https://gofastmcp.com)**, including detailed guides, API references, and advanced patterns. This readme provides only a high-level overview.\n\nDocumentation is also available in [llms.txt format](https://llmstxt.org/), which is a simple markdown standard that LLMs can consume easily.\n\nThere are two ways to access the LLM-friendly documentation:\n\n- [`llms.txt`](https://gofastmcp.com/llms.txt) is essentially a sitemap, listing all the pages in the documentation.\n- [`llms-full.txt`](https://gofastmcp.com/llms-full.txt) contains the entire documentation. Note this may exceed the context window of your LLM.\n\n---\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [What is MCP?](#what-is-mcp)\n- [Why FastMCP?](#why-fastmcp)\n- [Installation](#installation)\n- [Core Concepts](#core-concepts)\n  - [The `FastMCP` Server](#the-fastmcp-server)\n  - [Tools](#tools)\n  - [Resources \\& Templates](#resources--templates)\n  - [Prompts](#prompts)\n  - [Context](#context)\n  - [MCP Clients](#mcp-clients)\n- [Advanced Features](#advanced-features)\n  - [Proxy Servers](#proxy-servers)\n  - [Composing MCP Servers](#composing-mcp-servers)\n  - [OpenAPI \\& FastAPI Generation](#openapi--fastapi-generation)\n  - [Authentication \\& Security](#authentication--security)\n- [Running Your Server](#running-your-server)\n- [Contributing](#contributing)\n  - [Prerequisites](#prerequisites)\n  - [Setup](#setup)\n  - [Unit Tests](#unit-tests)\n  - [Static Checks](#static-checks)\n  - [Pull Requests](#pull-requests)\n\n---\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as \"the USB-C port for AI\", providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can:\n\n- Expose data through **Resources** (think of these sort of like GET endpoints; they are used to load information into the LLM's context)\n- Provide functionality through **Tools** (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)\n- Define interaction patterns through **Prompts** (reusable templates for LLM interactions)\n- And more!\n\nFastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers.\n\n## Why FastMCP?\n\nThe MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need.\n\nFastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities (and is now part of the official MCP SDK), 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns.\n\nFastMCP aims to be:\n\n🚀 **Fast:** High-level interface means less code and faster development\n\n🍀 **Simple:** Build MCP servers with minimal boilerplate\n\n🐍 **Pythonic:** Feels natural to Python developers\n\n🔍 **Complete:** A comprehensive platform for all MCP use cases, from dev to prod\n\n## Installation\n\nWe recommend installing FastMCP with [uv](https://docs.astral.sh/uv/):\n\n```bash\nuv pip install fastmcp\n```\n\nFor full installation instructions, including verification, upgrading from the official MCPSDK, and developer setup, see the [**Installation Guide**](https://gofastmcp.com/getting-started/installation).\n\n## Core Concepts\n\nThese are the building blocks for creating MCP servers and clients with FastMCP.\n\n### The `FastMCP` Server\n\nThe central object representing your MCP application. It holds your tools, resources, and prompts, manages connections, and can be configured with settings like authentication.\n\n```python\nfrom fastmcp import FastMCP\n\n# Create a server instance\nmcp = FastMCP(name=\"MyAssistantServer\")\n```\n\nLearn more in the [**FastMCP Server Documentation**](https://gofastmcp.com/servers/fastmcp).\n\n### Tools\n\nTools allow LLMs to perform actions by executing your Python functions (sync or async). Ideal for computations, API calls, or side effects (like `POST`/`PUT`). FastMCP handles schema generation from type hints and docstrings. Tools can return various types, including text, JSON-serializable objects, and even images or audio aided by the FastMCP media helper classes.\n\n```python\n@mcp.tool\ndef multiply(a: float, b: float) -> float:\n    \"\"\"Multiplies two numbers.\"\"\"\n    return a * b\n```\n\nLearn more in the [**Tools Documentation**](https://gofastmcp.com/servers/tools).\n\n### Resources & Templates\n\nResources expose read-only data sources (like `GET` requests). Use `@mcp.resource(\"your://uri\")`. Use `{placeholders}` in the URI to create dynamic templates that accept parameters, allowing clients to request specific data subsets.\n\n```python\n# Static resource\n@mcp.resource(\"config://version\")\ndef get_version(): \n    return \"2.0.1\"\n\n# Dynamic resource template\n@mcp.resource(\"users://{user_id}/profile\")\ndef get_profile(user_id: int):\n    # Fetch profile for user_id...\n    return {\"name\": f\"User {user_id}\", \"status\": \"active\"}\n```\n\nLearn more in the [**Resources & Templates Documentation**](https://gofastmcp.com/servers/resources).\n\n### Prompts\n\nPrompts define reusable message templates to guide LLM interactions. Decorate functions with `@mcp.prompt`. Return strings or `Message` objects.\n\n```python\n@mcp.prompt\ndef summarize_request(text: str) -> str:\n    \"\"\"Generate a prompt asking for a summary.\"\"\"\n    return f\"Please summarize the following text:\\n\\n{text}\"\n```\n\nLearn more in the [**Prompts Documentation**](https://gofastmcp.com/servers/prompts).\n\n### Context\n\nAccess MCP session capabilities within your tools, resources, or prompts by adding a `ctx: Context` parameter. Context provides methods for:\n\n- **Logging:** Log messages to MCP clients with `ctx.info()`, `ctx.error()`, etc.\n- **LLM Sampling:** Use `ctx.sample()` to request completions from the client's LLM.\n- **HTTP Request:** Use `ctx.http_request()` to make HTTP requests to other servers.\n- **Resource Access:** Use `ctx.read_resource()` to access resources on the server\n- **Progress Reporting:** Use `ctx.report_progress()` to report progress to the client.\n- and more...\n\nTo access the context, add a parameter annotated as `Context` to any mcp-decorated function. FastMCP will automatically inject the correct context object when the function is called.\n\n```python\nfrom fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"My MCP Server\")\n\n@mcp.tool\nasync def process_data(uri: str, ctx: Context):\n    # Log a message to the client\n    await ctx.info(f\"Processing {uri}...\")\n\n    # Read a resource from the server\n    data = await ctx.read_resource(uri)\n\n    # Ask client LLM to summarize the data\n    summary = await ctx.sample(f\"Summarize: {data.content[:500]}\")\n\n    # Return the summary\n    return summary.text\n```\n\nLearn more in the [**Context Documentation**](https://gofastmcp.com/servers/context).\n\n### MCP Clients\n\nInteract with *any* MCP server programmatically using the `fastmcp.Client`. It supports various transports (Stdio, SSE, In-Memory) and often auto-detects the correct one. The client can also handle advanced patterns like server-initiated **LLM sampling requests** if you provide an appropriate handler.\n\nCritically, the client allows for efficient **in-memory testing** of your servers by connecting directly to a `FastMCP` server instance via the `FastMCPTransport`, eliminating the need for process management or network calls during tests.\n\n```python\nfrom fastmcp import Client\n\nasync def main():\n    # Connect via stdio to a local script\n    async with Client(\"my_server.py\") as client:\n        tools = await client.list_tools()\n        print(f\"Available tools: {tools}\")\n        result = await client.call_tool(\"add\", {\"a\": 5, \"b\": 3})\n        print(f\"Result: {result.text}\")\n\n    # Connect via SSE\n    async with Client(\"http://localhost:8000/sse\") as client:\n        # ... use the client\n        pass\n```\n\nTo use clients to test servers, use the following pattern:\n\n```python\nfrom fastmcp import FastMCP, Client\n\nmcp = FastMCP(\"My MCP Server\")\n\nasync def main():\n    # Connect via in-memory transport\n    async with Client(mcp) as client:\n        # ... use the client\n```\n\nFastMCP also supports connecting to multiple servers through a single unified client using the standard MCP configuration format:\n\n```python\nfrom fastmcp import Client\n\n# Standard MCP configuration with multiple servers\nconfig = {\n    \"mcpServers\": {\n        \"weather\": {\"url\": \"https://weather-api.example.com/mcp\"},\n        \"assistant\": {\"command\": \"python\", \"args\": [\"./assistant_server.py\"]}\n    }\n}\n\n# Create a client that connects to all servers\nclient = Client(config)\n\nasync def main():\n    async with client:\n        # Access tools and resources with server prefixes\n        forecast = await client.call_tool(\"weather_get_forecast\", {\"city\": \"London\"})\n        answer = await client.call_tool(\"assistant_answer_question\", {\"query\": \"What is MCP?\"})\n```\n\nLearn more in the [**Client Documentation**](https://gofastmcp.com/clients/client) and [**Transports Documentation**](https://gofastmcp.com/clients/transports).\n\n## Advanced Features\n\nFastMCP introduces powerful ways to structure and deploy your MCP applications.\n\n### Proxy Servers\n\nCreate a FastMCP server that acts as an intermediary for another local or remote MCP server using `FastMCP.as_proxy()`. This is especially useful for bridging transports (e.g., remote SSE to local Stdio) or adding a layer of logic to a server you don't control.\n\nLearn more in the [**Proxying Documentation**](https://gofastmcp.com/patterns/proxy).\n\n### Composing MCP Servers\n\nBuild modular applications by mounting multiple `FastMCP` instances onto a parent server using `mcp.mount()` (live link) or `mcp.import_server()` (static copy).\n\nLearn more in the [**Composition Documentation**](https://gofastmcp.com/patterns/composition).\n\n### OpenAPI & FastAPI Generation\n\nAutomatically generate FastMCP servers from existing OpenAPI specifications (`FastMCP.from_openapi()`) or FastAPI applications (`FastMCP.from_fastapi()`), instantly bringing your web APIs to the MCP ecosystem.\n\nLearn more: [**OpenAPI Integration**](https://gofastmcp.com/integrations/openapi) | [**FastAPI Integration**](https://gofastmcp.com/integrations/fastapi).\n\n### Authentication & Security\n\nFastMCP provides built-in authentication support to secure both your MCP servers and clients in production environments. Protect your server endpoints from unauthorized access and authenticate your clients against secured MCP servers using industry-standard protocols.\n\n- **Server Protection**: Secure your FastMCP server endpoints with configurable authentication providers\n- **Client Authentication**: Connect to authenticated MCP servers with automatic credential management\n- **Production Ready**: Support for common authentication patterns used in enterprise environments\n\nLearn more in the **Authentication Documentation** for [servers](https://gofastmcp.com/servers/auth) and [clients](https://gofastmcp.com/clients/auth).\n\n## Running Your Server\n\nThe main way to run a FastMCP server is by calling the `run()` method on your server instance:\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo 🚀\")\n\n@mcp.tool\ndef hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    mcp.run()  # Default: uses STDIO transport\n```\n\nFastMCP supports three transport protocols:\n\n**STDIO (Default)**: Best for local tools and command-line scripts.\n\n```python\nmcp.run(transport=\"stdio\")  # Default, so transport argument is optional\n```\n\n**Streamable HTTP**: Recommended for web deployments.\n\n```python\nmcp.run(transport=\"http\", host=\"127.0.0.1\", port=8000, path=\"/mcp\")\n```\n\n**SSE**: For compatibility with existing SSE clients.\n\n```python\nmcp.run(transport=\"sse\", host=\"127.0.0.1\", port=8000)\n```\n\nSee the [**Running Server Documentation**](https://gofastmcp.com/deployment/running-server) for more details.\n\n## Contributing\n\nContributions are the core of open source! We welcome improvements and features.\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://docs.astral.sh/uv/) (Recommended for environment management)\n\n### Setup\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/jlowin/fastmcp.git \n   cd fastmcp\n   ```\n\n2. Create and sync the environment:\n\n   ```bash\n   uv sync\n   ```\n\n   This installs all dependencies, including dev tools.\n\n3. Activate the virtual environment (e.g., `source .venv/bin/activate` or via your IDE).\n\n### Unit Tests\n\nFastMCP has a comprehensive unit test suite. All PRs must introduce or update tests as appropriate and pass the full suite.\n\nRun tests using pytest:\n\n```bash\npytest\n```\n\nor if you want an overview of the code coverage\n\n```bash\nuv run pytest --cov=src --cov=examples --cov-report=html\n```\n\n### Static Checks\n\nFastMCP uses `pre-commit` for code formatting, linting, and type-checking. All PRs must pass these checks (they run automatically in CI).\n\nInstall the hooks locally:\n\n```bash\nuv run pre-commit install\n```\n\nThe hooks will now run automatically on `git commit`. You can also run them manually at any time:\n\n```bash\npre-commit run --all-files\n# or via uv\nuv run pre-commit run --all-files\n```\n\n### Pull Requests\n\n1. Fork the repository on GitHub.\n2. Create a feature branch from `main`.\n3. Make your changes, including tests and documentation updates.\n4. Ensure tests and pre-commit hooks pass.\n5. Commit your changes and push to your fork.\n6. Open a pull request against the `main` branch of `jlowin/fastmcp`.\n\nPlease open an issue or discussion for questions or suggestions before starting significant work!\n","size_bytes":16542},"attached_assets/README (1)_1754835179144.md":{"content":"<div align=\"center\">\n\n<!-- omit in toc -->\n# FastMCP v2 🚀\n\n<strong>The fast, Pythonic way to build MCP servers and clients.</strong>\n\n*Made with ☕️ by [Prefect](https://www.prefect.io/)*\n\n[![Docs](https://img.shields.io/badge/docs-gofastmcp.com-blue)](https://gofastmcp.com)\n[![PyPI - Version](https://img.shields.io/pypi/v/fastmcp.svg)](https://pypi.org/project/fastmcp)\n[![Tests](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg)](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml)\n[![License](https://img.shields.io/github/license/jlowin/fastmcp.svg)](https://github.com/jlowin/fastmcp/blob/main/LICENSE)\n\n<a href=\"https://trendshift.io/repositories/13266\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/13266\" alt=\"jlowin%2Ffastmcp | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</div>\n\n> [!Note]\n>\n> #### Beyond the Protocol\n>\n> FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the [official MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) in 2024.\n>\n> This is FastMCP 2.0, the **actively maintained version** that provides a complete toolkit for working with the MCP ecosystem.\n>\n> FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing **the simplest path to production**. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more.\n>\n> Ready to upgrade or get started? Follow the [installation instructions](https://gofastmcp.com/getting-started/installation), which include steps for upgrading from the official MCP SDK.\n\n---\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code.\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo 🚀\")\n\n@mcp.tool\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\nRun the server locally:\n\n```bash\nfastmcp run server.py\n```\n\n### 📚 Documentation\n\nFastMCP's complete documentation is available at **[gofastmcp.com](https://gofastmcp.com)**, including detailed guides, API references, and advanced patterns. This readme provides only a high-level overview.\n\nDocumentation is also available in [llms.txt format](https://llmstxt.org/), which is a simple markdown standard that LLMs can consume easily.\n\nThere are two ways to access the LLM-friendly documentation:\n\n- [`llms.txt`](https://gofastmcp.com/llms.txt) is essentially a sitemap, listing all the pages in the documentation.\n- [`llms-full.txt`](https://gofastmcp.com/llms-full.txt) contains the entire documentation. Note this may exceed the context window of your LLM.\n\n---\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [What is MCP?](#what-is-mcp)\n- [Why FastMCP?](#why-fastmcp)\n- [Installation](#installation)\n- [Core Concepts](#core-concepts)\n  - [The `FastMCP` Server](#the-fastmcp-server)\n  - [Tools](#tools)\n  - [Resources \\& Templates](#resources--templates)\n  - [Prompts](#prompts)\n  - [Context](#context)\n  - [MCP Clients](#mcp-clients)\n- [Advanced Features](#advanced-features)\n  - [Proxy Servers](#proxy-servers)\n  - [Composing MCP Servers](#composing-mcp-servers)\n  - [OpenAPI \\& FastAPI Generation](#openapi--fastapi-generation)\n  - [Authentication \\& Security](#authentication--security)\n- [Running Your Server](#running-your-server)\n- [Contributing](#contributing)\n  - [Prerequisites](#prerequisites)\n  - [Setup](#setup)\n  - [Unit Tests](#unit-tests)\n  - [Static Checks](#static-checks)\n  - [Pull Requests](#pull-requests)\n\n---\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as \"the USB-C port for AI\", providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can:\n\n- Expose data through **Resources** (think of these sort of like GET endpoints; they are used to load information into the LLM's context)\n- Provide functionality through **Tools** (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)\n- Define interaction patterns through **Prompts** (reusable templates for LLM interactions)\n- And more!\n\nFastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers.\n\n## Why FastMCP?\n\nThe MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need.\n\nFastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities (and is now part of the official MCP SDK), 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns.\n\nFastMCP aims to be:\n\n🚀 **Fast:** High-level interface means less code and faster development\n\n🍀 **Simple:** Build MCP servers with minimal boilerplate\n\n🐍 **Pythonic:** Feels natural to Python developers\n\n🔍 **Complete:** A comprehensive platform for all MCP use cases, from dev to prod\n\n## Installation\n\nWe recommend installing FastMCP with [uv](https://docs.astral.sh/uv/):\n\n```bash\nuv pip install fastmcp\n```\n\nFor full installation instructions, including verification, upgrading from the official MCPSDK, and developer setup, see the [**Installation Guide**](https://gofastmcp.com/getting-started/installation).\n\n## Core Concepts\n\nThese are the building blocks for creating MCP servers and clients with FastMCP.\n\n### The `FastMCP` Server\n\nThe central object representing your MCP application. It holds your tools, resources, and prompts, manages connections, and can be configured with settings like authentication.\n\n```python\nfrom fastmcp import FastMCP\n\n# Create a server instance\nmcp = FastMCP(name=\"MyAssistantServer\")\n```\n\nLearn more in the [**FastMCP Server Documentation**](https://gofastmcp.com/servers/fastmcp).\n\n### Tools\n\nTools allow LLMs to perform actions by executing your Python functions (sync or async). Ideal for computations, API calls, or side effects (like `POST`/`PUT`). FastMCP handles schema generation from type hints and docstrings. Tools can return various types, including text, JSON-serializable objects, and even images or audio aided by the FastMCP media helper classes.\n\n```python\n@mcp.tool\ndef multiply(a: float, b: float) -> float:\n    \"\"\"Multiplies two numbers.\"\"\"\n    return a * b\n```\n\nLearn more in the [**Tools Documentation**](https://gofastmcp.com/servers/tools).\n\n### Resources & Templates\n\nResources expose read-only data sources (like `GET` requests). Use `@mcp.resource(\"your://uri\")`. Use `{placeholders}` in the URI to create dynamic templates that accept parameters, allowing clients to request specific data subsets.\n\n```python\n# Static resource\n@mcp.resource(\"config://version\")\ndef get_version(): \n    return \"2.0.1\"\n\n# Dynamic resource template\n@mcp.resource(\"users://{user_id}/profile\")\ndef get_profile(user_id: int):\n    # Fetch profile for user_id...\n    return {\"name\": f\"User {user_id}\", \"status\": \"active\"}\n```\n\nLearn more in the [**Resources & Templates Documentation**](https://gofastmcp.com/servers/resources).\n\n### Prompts\n\nPrompts define reusable message templates to guide LLM interactions. Decorate functions with `@mcp.prompt`. Return strings or `Message` objects.\n\n```python\n@mcp.prompt\ndef summarize_request(text: str) -> str:\n    \"\"\"Generate a prompt asking for a summary.\"\"\"\n    return f\"Please summarize the following text:\\n\\n{text}\"\n```\n\nLearn more in the [**Prompts Documentation**](https://gofastmcp.com/servers/prompts).\n\n### Context\n\nAccess MCP session capabilities within your tools, resources, or prompts by adding a `ctx: Context` parameter. Context provides methods for:\n\n- **Logging:** Log messages to MCP clients with `ctx.info()`, `ctx.error()`, etc.\n- **LLM Sampling:** Use `ctx.sample()` to request completions from the client's LLM.\n- **HTTP Request:** Use `ctx.http_request()` to make HTTP requests to other servers.\n- **Resource Access:** Use `ctx.read_resource()` to access resources on the server\n- **Progress Reporting:** Use `ctx.report_progress()` to report progress to the client.\n- and more...\n\nTo access the context, add a parameter annotated as `Context` to any mcp-decorated function. FastMCP will automatically inject the correct context object when the function is called.\n\n```python\nfrom fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"My MCP Server\")\n\n@mcp.tool\nasync def process_data(uri: str, ctx: Context):\n    # Log a message to the client\n    await ctx.info(f\"Processing {uri}...\")\n\n    # Read a resource from the server\n    data = await ctx.read_resource(uri)\n\n    # Ask client LLM to summarize the data\n    summary = await ctx.sample(f\"Summarize: {data.content[:500]}\")\n\n    # Return the summary\n    return summary.text\n```\n\nLearn more in the [**Context Documentation**](https://gofastmcp.com/servers/context).\n\n### MCP Clients\n\nInteract with *any* MCP server programmatically using the `fastmcp.Client`. It supports various transports (Stdio, SSE, In-Memory) and often auto-detects the correct one. The client can also handle advanced patterns like server-initiated **LLM sampling requests** if you provide an appropriate handler.\n\nCritically, the client allows for efficient **in-memory testing** of your servers by connecting directly to a `FastMCP` server instance via the `FastMCPTransport`, eliminating the need for process management or network calls during tests.\n\n```python\nfrom fastmcp import Client\n\nasync def main():\n    # Connect via stdio to a local script\n    async with Client(\"my_server.py\") as client:\n        tools = await client.list_tools()\n        print(f\"Available tools: {tools}\")\n        result = await client.call_tool(\"add\", {\"a\": 5, \"b\": 3})\n        print(f\"Result: {result.text}\")\n\n    # Connect via SSE\n    async with Client(\"http://localhost:8000/sse\") as client:\n        # ... use the client\n        pass\n```\n\nTo use clients to test servers, use the following pattern:\n\n```python\nfrom fastmcp import FastMCP, Client\n\nmcp = FastMCP(\"My MCP Server\")\n\nasync def main():\n    # Connect via in-memory transport\n    async with Client(mcp) as client:\n        # ... use the client\n```\n\nFastMCP also supports connecting to multiple servers through a single unified client using the standard MCP configuration format:\n\n```python\nfrom fastmcp import Client\n\n# Standard MCP configuration with multiple servers\nconfig = {\n    \"mcpServers\": {\n        \"weather\": {\"url\": \"https://weather-api.example.com/mcp\"},\n        \"assistant\": {\"command\": \"python\", \"args\": [\"./assistant_server.py\"]}\n    }\n}\n\n# Create a client that connects to all servers\nclient = Client(config)\n\nasync def main():\n    async with client:\n        # Access tools and resources with server prefixes\n        forecast = await client.call_tool(\"weather_get_forecast\", {\"city\": \"London\"})\n        answer = await client.call_tool(\"assistant_answer_question\", {\"query\": \"What is MCP?\"})\n```\n\nLearn more in the [**Client Documentation**](https://gofastmcp.com/clients/client) and [**Transports Documentation**](https://gofastmcp.com/clients/transports).\n\n## Advanced Features\n\nFastMCP introduces powerful ways to structure and deploy your MCP applications.\n\n### Proxy Servers\n\nCreate a FastMCP server that acts as an intermediary for another local or remote MCP server using `FastMCP.as_proxy()`. This is especially useful for bridging transports (e.g., remote SSE to local Stdio) or adding a layer of logic to a server you don't control.\n\nLearn more in the [**Proxying Documentation**](https://gofastmcp.com/patterns/proxy).\n\n### Composing MCP Servers\n\nBuild modular applications by mounting multiple `FastMCP` instances onto a parent server using `mcp.mount()` (live link) or `mcp.import_server()` (static copy).\n\nLearn more in the [**Composition Documentation**](https://gofastmcp.com/patterns/composition).\n\n### OpenAPI & FastAPI Generation\n\nAutomatically generate FastMCP servers from existing OpenAPI specifications (`FastMCP.from_openapi()`) or FastAPI applications (`FastMCP.from_fastapi()`), instantly bringing your web APIs to the MCP ecosystem.\n\nLearn more: [**OpenAPI Integration**](https://gofastmcp.com/integrations/openapi) | [**FastAPI Integration**](https://gofastmcp.com/integrations/fastapi).\n\n### Authentication & Security\n\nFastMCP provides built-in authentication support to secure both your MCP servers and clients in production environments. Protect your server endpoints from unauthorized access and authenticate your clients against secured MCP servers using industry-standard protocols.\n\n- **Server Protection**: Secure your FastMCP server endpoints with configurable authentication providers\n- **Client Authentication**: Connect to authenticated MCP servers with automatic credential management\n- **Production Ready**: Support for common authentication patterns used in enterprise environments\n\nLearn more in the **Authentication Documentation** for [servers](https://gofastmcp.com/servers/auth) and [clients](https://gofastmcp.com/clients/auth).\n\n## Running Your Server\n\nThe main way to run a FastMCP server is by calling the `run()` method on your server instance:\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo 🚀\")\n\n@mcp.tool\ndef hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    mcp.run()  # Default: uses STDIO transport\n```\n\nFastMCP supports three transport protocols:\n\n**STDIO (Default)**: Best for local tools and command-line scripts.\n\n```python\nmcp.run(transport=\"stdio\")  # Default, so transport argument is optional\n```\n\n**Streamable HTTP**: Recommended for web deployments.\n\n```python\nmcp.run(transport=\"http\", host=\"127.0.0.1\", port=8000, path=\"/mcp\")\n```\n\n**SSE**: For compatibility with existing SSE clients.\n\n```python\nmcp.run(transport=\"sse\", host=\"127.0.0.1\", port=8000)\n```\n\nSee the [**Running Server Documentation**](https://gofastmcp.com/deployment/running-server) for more details.\n\n## Contributing\n\nContributions are the core of open source! We welcome improvements and features.\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://docs.astral.sh/uv/) (Recommended for environment management)\n\n### Setup\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/jlowin/fastmcp.git \n   cd fastmcp\n   ```\n\n2. Create and sync the environment:\n\n   ```bash\n   uv sync\n   ```\n\n   This installs all dependencies, including dev tools.\n\n3. Activate the virtual environment (e.g., `source .venv/bin/activate` or via your IDE).\n\n### Unit Tests\n\nFastMCP has a comprehensive unit test suite. All PRs must introduce or update tests as appropriate and pass the full suite.\n\nRun tests using pytest:\n\n```bash\npytest\n```\n\nor if you want an overview of the code coverage\n\n```bash\nuv run pytest --cov=src --cov=examples --cov-report=html\n```\n\n### Static Checks\n\nFastMCP uses `pre-commit` for code formatting, linting, and type-checking. All PRs must pass these checks (they run automatically in CI).\n\nInstall the hooks locally:\n\n```bash\nuv run pre-commit install\n```\n\nThe hooks will now run automatically on `git commit`. You can also run them manually at any time:\n\n```bash\npre-commit run --all-files\n# or via uv\nuv run pre-commit run --all-files\n```\n\n### Pull Requests\n\n1. Fork the repository on GitHub.\n2. Create a feature branch from `main`.\n3. Make your changes, including tests and documentation updates.\n4. Ensure tests and pre-commit hooks pass.\n5. Commit your changes and push to your fork.\n6. Open a pull request against the `main` branch of `jlowin/fastmcp`.\n\nPlease open an issue or discussion for questions or suggestions before starting significant work!\n","size_bytes":16542},"attached_assets/client_openai_deepseek_1754806880661.py":{"content":"import asyncio\nimport sys\nimport json\nfrom typing import Optional, Any, Dict, List\nfrom contextlib import AsyncExitStack\n\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nimport httpx\n\n# Deepseek config (set your env vars or hardcode here)\nDEEPSEEK_API_URL = \"https://api.deepseek.com\"  # Replace with actual Deepseek URL\nDEEPSEEK_API_KEY = \"sk-1414609620f448b6966346842d3b64db\"  # Replace with your actual key\nDEEPSEEK_MODEL = \"deepseek-chat\"  # Use the correct model name\n\n\nclass DeepseekClient:\n    def __init__(self, base_url: str, api_key: str, timeout: int = 30):\n        self.base_url = base_url\n        self.api_key = api_key\n        self.timeout = timeout\n        self._client = httpx.AsyncClient(timeout=self.timeout)\n\n    async def chat_stream(self, messages: List[Dict[str, str]]):\n        # Stream chat completions from Deepseek API\n        url = f\"{self.base_url}/chat/completions\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n        }\n        payload = {\n            \"model\": \"deepseek-chat\",\n            \"messages\": messages,\n            \"stream\": True\n        }\n\n        async with httpx.AsyncClient(timeout=None) as client:\n            async with client.stream(\"POST\", url, headers=headers, json=payload) as response:\n                response.raise_for_status()\n                async for line in response.aiter_lines():\n                    if line.startswith(\"data: \"):\n                        data_str = line[len(\"data: \"):].strip()\n                        if data_str == \"[DONE]\":\n                            break\n                        try:\n                            data = json.loads(data_str)\n                            yield data\n                        except Exception:\n                            pass\n\n    async def close(self):\n        await self._client.aclose()\n\n\nclass MCPClient:\n    def __init__(self, server_script_path: str):\n        self.server_script_path = server_script_path\n        self.session: Optional[ClientSession] = None\n        self.exit_stack = AsyncExitStack()\n        self.deepseek = DeepseekClient(DEEPSEEK_API_URL, DEEPSEEK_API_KEY)\n\n    async def connect_to_server(self):\n        is_python = self.server_script_path.endswith(\".py\")\n        if not is_python:\n            raise ValueError(\"Server script must be a Python file (.py)\")\n\n        server_params = StdioServerParameters(\n            command=\"python\",\n            args=[self.server_script_path],\n            env=None,\n        )\n\n        stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))\n        self.stdio, self.write = stdio_transport\n        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))\n\n        await self.session.initialize()\n\n        response = await self.session.list_tools()\n        tools = response.tools\n        print(\"\\nConnected to server with tools:\", [tool.name for tool in tools])\n\n    async def process_query(self, query: str):\n        messages = [{\"role\": \"user\", \"content\": query}]\n        print(\"\\nStreaming response:\")\n\n        async for chunk in self.deepseek.chat_stream(messages):\n            # Check if this chunk contains a tool call\n            if \"function_call\" in chunk[\"choices\"][0][\"delta\"]:\n                # Extract function call info\n                function_call = chunk[\"choices\"][0][\"delta\"][\"function_call\"]\n                tool_name = function_call.get(\"name\")\n                tool_args = function_call.get(\"arguments\")\n\n                # Call your local tool with these arguments\n                tool_result = await self.call_tool(tool_name, tool_args)\n\n                # Send tool result back to server as a message\n                messages.append({\n                    \"role\": \"function\",\n                    \"name\": tool_name,\n                    \"content\": tool_result\n                })\n                # You may need to restart or continue chat_stream with updated messages\n\n            # Otherwise, print normal content\n            content = chunk[\"choices\"][0][\"delta\"].get(\"content\")\n            if content:\n                print(content, end=\"\", flush=True)\n\n            if chunk[\"choices\"][0].get(\"finish_reason\") == \"stop\":\n                break\n        print()\n\n    async def chat_loop(self):\n        print(\"\\nMCP Client Started (Deepseek)!\")\n        print(\"Type your queries or 'quit' to exit.\")\n        while True:\n            query = input(\"\\nQuery: \").strip()\n            if query.lower() == \"quit\":\n                break\n            try:\n                await self.process_query(query)\n            except Exception as e:\n                print(f\"Error: {e}\")\n\n    async def cleanup(self):\n        try:\n            await self.exit_stack.aclose()\n        except Exception:\n            pass\n        try:\n            await self.deepseek.close()\n        except Exception:\n            pass\n\n\nasync def main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python client_deepseek.py <path_to_server_script.py>\")\n        sys.exit(1)\n\n    client = MCPClient(sys.argv[1])\n    try:\n        await client.connect_to_server()\n        await client.chat_loop()\n    finally:\n        await client.cleanup()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n","size_bytes":5332},"attached_assets/client_openai_deepseek_1754826459472.py":{"content":"import asyncio\nimport sys\nimport json\nfrom typing import Optional, Any, Dict, List\nfrom contextlib import AsyncExitStack\n\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nimport httpx\n\n# Deepseek config (set your env vars or hardcode here)\nDEEPSEEK_API_URL = \"https://api.deepseek.com\"  # Replace with actual Deepseek URL\nDEEPSEEK_API_KEY = \"sk-1414609620f448b6966346842d3b64db\"  # Replace with your actual key\nDEEPSEEK_MODEL = \"deepseek-chat\"  # Use the correct model name\n\n\nclass DeepseekClient:\n    def __init__(self, base_url: str, api_key: str, timeout: int = 30):\n        self.base_url = base_url\n        self.api_key = api_key\n        self.timeout = timeout\n        self._client = httpx.AsyncClient(timeout=self.timeout)\n\n    async def chat_stream(self, messages: List[Dict[str, str]]):\n        # Stream chat completions from Deepseek API\n        url = f\"{self.base_url}/chat/completions\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n        }\n        payload = {\n            \"model\": \"deepseek-chat\",\n            \"messages\": messages,\n            \"stream\": True\n        }\n\n        async with httpx.AsyncClient(timeout=None) as client:\n            async with client.stream(\"POST\", url, headers=headers, json=payload) as response:\n                response.raise_for_status()\n                async for line in response.aiter_lines():\n                    if line.startswith(\"data: \"):\n                        data_str = line[len(\"data: \"):].strip()\n                        if data_str == \"[DONE]\":\n                            break\n                        try:\n                            data = json.loads(data_str)\n                            yield data\n                        except Exception:\n                            pass\n\n    async def close(self):\n        await self._client.aclose()\n\n\nclass MCPClient:\n    def __init__(self, server_script_path: str):\n        self.server_script_path = server_script_path\n        self.session: Optional[ClientSession] = None\n        self.exit_stack = AsyncExitStack()\n        self.deepseek = DeepseekClient(DEEPSEEK_API_URL, DEEPSEEK_API_KEY)\n\n    async def connect_to_server(self):\n        is_python = self.server_script_path.endswith(\".py\")\n        if not is_python:\n            raise ValueError(\"Server script must be a Python file (.py)\")\n\n        server_params = StdioServerParameters(\n            command=\"python\",\n            args=[self.server_script_path],\n            env=None,\n        )\n\n        stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))\n        self.stdio, self.write = stdio_transport\n        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))\n\n        await self.session.initialize()\n\n        response = await self.session.list_tools()\n        tools = response.tools\n        print(\"\\nConnected to server with tools:\", [tool.name for tool in tools])\n\n    async def process_query(self, query: str):\n        messages = [{\"role\": \"user\", \"content\": query}]\n        print(\"\\nStreaming response:\")\n\n        async for chunk in self.deepseek.chat_stream(messages):\n            # Check if this chunk contains a tool call\n            if \"function_call\" in chunk[\"choices\"][0][\"delta\"]:\n                # Extract function call info\n                function_call = chunk[\"choices\"][0][\"delta\"][\"function_call\"]\n                tool_name = function_call.get(\"name\")\n                tool_args = function_call.get(\"arguments\")\n\n                # Call your local tool with these arguments\n                tool_result = await self.call_tool(tool_name, tool_args)\n\n                # Send tool result back to server as a message\n                messages.append({\n                    \"role\": \"function\",\n                    \"name\": tool_name,\n                    \"content\": tool_result\n                })\n                # You may need to restart or continue chat_stream with updated messages\n\n            # Otherwise, print normal content\n            content = chunk[\"choices\"][0][\"delta\"].get(\"content\")\n            if content:\n                print(content, end=\"\", flush=True)\n\n            if chunk[\"choices\"][0].get(\"finish_reason\") == \"stop\":\n                break\n        print()\n\n    async def chat_loop(self):\n        print(\"\\nMCP Client Started (Deepseek)!\")\n        print(\"Type your queries or 'quit' to exit.\")\n        while True:\n            query = input(\"\\nQuery: \").strip()\n            if query.lower() == \"quit\":\n                break\n            try:\n                await self.process_query(query)\n            except Exception as e:\n                print(f\"Error: {e}\")\n\n    async def cleanup(self):\n        try:\n            await self.exit_stack.aclose()\n        except Exception:\n            pass\n        try:\n            await self.deepseek.close()\n        except Exception:\n            pass\n\n\nasync def main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python client_deepseek.py <path_to_server_script.py>\")\n        sys.exit(1)\n\n    client = MCPClient(sys.argv[1])\n    try:\n        await client.connect_to_server()\n        await client.chat_loop()\n    finally:\n        await client.cleanup()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n","size_bytes":5332},"attached_assets/weather_1754826473388.py":{"content":"<<<<<<< HEAD\nfrom typing import Any\r\nimport httpx\r\nfrom mcp.server.fastmcp import FastMCP\r\nimport re\r\nimport aiohttp\r\n\r\n\r\n# Initialize FastMCP server\r\nmcp = FastMCP(\"weather\")\r\n\r\n# Constants\r\nNWS_API_BASE = \"https://api.weather.gov\"\r\nUSER_AGENT = \"weather-app/1.0\"\r\n\r\n# Replace with your real geocoding API details\r\nGEOCODE_API_URL = \"https://api.openweathermap.org/geo/1.0/direct\"\r\nGEOCODE_API_KEY = \"YOUR_API_KEY\"\r\n\r\n\r\nasync def geocode_location(location: str):\r\n    \"\"\"Convert a location name into lat/lon using your geocoding API.\"\"\"\r\n    params = {\r\n        \"q\": location,\r\n        \"limit\": 1,\r\n        \"appid\": GEOCODE_API_KEY\r\n    }\r\n    async with aiohttp.ClientSession() as session:\r\n        async with session.get(GEOCODE_API_URL, params=params) as resp:\r\n            data = await resp.json()\r\n            if data:\r\n                return data[0][\"lat\"], data[0][\"lon\"]\r\n            return None, None\r\n\r\n\r\nasync def handle_weather_query(query: str, mcp_client):\r\n    \"\"\"Parse location, geocode, and call MCP weather tools.\"\"\"\r\n    location_match = re.search(r\"\\b([A-Za-z\\s]+)\\b\", query)\r\n    if not location_match:\r\n        return (\"To check the current weather or alerts, please tell me your city/region.\")\r\n\r\n    location = location_match.group(1).strip()\r\n    lat, lon = await geocode_location(location)\r\n\r\n    if not lat or not lon:\r\n        return f\"Sorry, I couldn't find coordinates for '{location}'. Please try again.\"\r\n\r\n    # Example: call your MCP server's forecast tool\r\n    forecast_result = await mcp_client.call_tool(\"get_forecast\", {\"lat\": lat, \"lon\": lon})\r\n    return forecast_result[\"result\"]\r\n\r\n\r\nasync def make_nws_request(url: str) -> dict[str, Any] | None:\r\n    \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\r\n    headers = {\r\n        \"User-Agent\": USER_AGENT,\r\n        \"Accept\": \"application/geo+json\"\r\n    }\r\n    async with httpx.AsyncClient() as client:\r\n        try:\r\n            response = await client.get(url, headers=headers, timeout=30.0)\r\n            response.raise_for_status()\r\n            return response.json()\r\n        except Exception:\r\n            return None\r\n\r\ndef format_alert(feature: dict) -> str:\r\n    \"\"\"Format an alert feature into a readable string.\"\"\"\r\n    props = feature[\"properties\"]\r\n    return f\"\"\"\r\nEvent: {props.get('event', 'Unknown')}\r\nArea: {props.get('areaDesc', 'Unknown')}\r\nSeverity: {props.get('severity', 'Unknown')}\r\nDescription: {props.get('description', 'No description available')}\r\nInstructions: {props.get('instruction', 'No specific instructions provided')}\r\n\"\"\"\r\n\r\n@mcp.tool()\r\nasync def get_alerts(state: str) -> str:\r\n    \"\"\"Get weather alerts for a US state.\r\n\r\n    Args:\r\n        state: Two-letter US state code (e.g. CA, NY)\r\n    \"\"\"\r\n    url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\r\n    data = await make_nws_request(url)\r\n\r\n    if not data or \"features\" not in data:\r\n        return \"Unable to fetch alerts or no alerts found.\"\r\n\r\n    if not data[\"features\"]:\r\n        return \"No active alerts for this state.\"\r\n\r\n    alerts = [format_alert(feature) for feature in data[\"features\"]]\r\n    return \"\\n---\\n\".join(alerts)\r\n\r\n@mcp.tool()\r\nasync def get_forecast(latitude: float, longitude: float) -> str:\r\n    \"\"\"Get weather forecast for a location.\r\n\r\n    Args:\r\n        latitude: Latitude of the location\r\n        longitude: Longitude of the location\r\n    \"\"\"\r\n    # First get the forecast grid endpoint\r\n    points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\r\n    points_data = await make_nws_request(points_url)\r\n\r\n    if not points_data:\r\n        return \"Unable to fetch forecast data for this location.\"\r\n\r\n    # Get the forecast URL from the points response\r\n    forecast_url = points_data[\"properties\"][\"forecast\"]\r\n    forecast_data = await make_nws_request(forecast_url)\r\n\r\n    if not forecast_data:\r\n        return \"Unable to fetch detailed forecast.\"\r\n\r\n    # Format the periods into a readable forecast\r\n    periods = forecast_data[\"properties\"][\"periods\"]\r\n    forecasts = []\r\n    for period in periods[:5]:  # Only show next 5 periods\r\n        forecast = f\"\"\"\r\n{period['name']}:\r\nTemperature: {period['temperature']}°{period['temperatureUnit']}\r\nWind: {period['windSpeed']} {period['windDirection']}\r\nForecast: {period['detailedForecast']}\r\n\"\"\"\r\n        forecasts.append(forecast)\r\n\r\n    return \"\\n---\\n\".join(forecasts)\r\n\r\nimport re\r\n\r\n@mcp.tool()\r\nasync def query_router(query: str) -> str:\r\n    \"\"\"Route the query to the correct weather tool.\"\"\"\r\n\r\n    # Check for alert queries with state code (CA, NY, etc.)\r\n    alert_match = re.search(r'\\b(alerts?|warnings?)\\b.*\\b([A-Z]{2})\\b', query, re.I)\r\n    if alert_match:\r\n        state = alert_match.group(2).upper()\r\n        return await get_alerts(state)\r\n\r\n    # Check for forecast with lat, lon coordinates\r\n    coords_match = re.search(r'forecast.*?(-?\\d+\\.\\d+)[ ,]+(-?\\d+\\.\\d+)', query, re.I)\r\n    if coords_match:\r\n        lat = float(coords_match.group(1))\r\n        lon = float(coords_match.group(2))\r\n        return await get_forecast(lat, lon)\r\n\r\n    # Basic city name matching for demo\r\n    if \"new york\" in query.lower():\r\n        return await get_forecast(40.7831, -73.9712)\r\n    if \"san francisco\" in query.lower():\r\n        return await get_forecast(37.7749, -122.4194)\r\n\r\n    return \"Sorry, I couldn't understand your request. Please specify a state code for alerts or coordinates for forecast.\"\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Initialize and run the server\r\n    mcp.run(transport='stdio')\r\n\r\n\r\n=======\nfrom typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\nimport re\nimport aiohttp\n\n\n# Initialize FastMCP server\nmcp = FastMCP(\"weather\")\n\n# Constants\nNWS_API_BASE = \"https://api.weather.gov\"\nUSER_AGENT = \"weather-app/1.0\"\n\n# Replace with your real geocoding API details\nGEOCODE_API_URL = \"https://api.openweathermap.org/geo/1.0/direct\"\nGEOCODE_API_KEY = \"YOUR_API_KEY\"\n\n\nasync def geocode_location(location: str):\n    \"\"\"Convert a location name into lat/lon using your geocoding API.\"\"\"\n    params = {\n        \"q\": location,\n        \"limit\": 1,\n        \"appid\": GEOCODE_API_KEY\n    }\n    async with aiohttp.ClientSession() as session:\n        async with session.get(GEOCODE_API_URL, params=params) as resp:\n            data = await resp.json()\n            if data:\n                return data[0][\"lat\"], data[0][\"lon\"]\n            return None, None\n\n\nasync def handle_weather_query(query: str, mcp_client):\n    \"\"\"Parse location, geocode, and call MCP weather tools.\"\"\"\n    location_match = re.search(r\"\\b([A-Za-z\\s]+)\\b\", query)\n    if not location_match:\n        return (\"To check the current weather or alerts, please tell me your city/region.\")\n\n    location = location_match.group(1).strip()\n    lat, lon = await geocode_location(location)\n\n    if not lat or not lon:\n        return f\"Sorry, I couldn't find coordinates for '{location}'. Please try again.\"\n\n    # Example: call your MCP server's forecast tool\n    forecast_result = await mcp_client.call_tool(\"get_forecast\", {\"lat\": lat, \"lon\": lon})\n    return forecast_result[\"result\"]\n\n\nasync def make_nws_request(url: str) -> dict[str, Any] | None:\n    \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"application/geo+json\"\n    }\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, headers=headers, timeout=30.0)\n            response.raise_for_status()\n            return response.json()\n        except Exception:\n            return None\n\ndef format_alert(feature: dict) -> str:\n    \"\"\"Format an alert feature into a readable string.\"\"\"\n    props = feature[\"properties\"]\n    return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n\n@mcp.tool()\nasync def get_alerts(state: str) -> str:\n    \"\"\"Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    \"\"\"\n    url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\n    data = await make_nws_request(url)\n\n    if not data or \"features\" not in data:\n        return \"Unable to fetch alerts or no alerts found.\"\n\n    if not data[\"features\"]:\n        return \"No active alerts for this state.\"\n\n    alerts = [format_alert(feature) for feature in data[\"features\"]]\n    return \"\\n---\\n\".join(alerts)\n\n@mcp.tool()\nasync def get_forecast(latitude: float, longitude: float) -> str:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    \"\"\"\n    # First get the forecast grid endpoint\n    points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\n    points_data = await make_nws_request(points_url)\n\n    if not points_data:\n        return \"Unable to fetch forecast data for this location.\"\n\n    # Get the forecast URL from the points response\n    forecast_url = points_data[\"properties\"][\"forecast\"]\n    forecast_data = await make_nws_request(forecast_url)\n\n    if not forecast_data:\n        return \"Unable to fetch detailed forecast.\"\n\n    # Format the periods into a readable forecast\n    periods = forecast_data[\"properties\"][\"periods\"]\n    forecasts = []\n    for period in periods[:5]:  # Only show next 5 periods\n        forecast = f\"\"\"\n{period['name']}:\nTemperature: {period['temperature']}°{period['temperatureUnit']}\nWind: {period['windSpeed']} {period['windDirection']}\nForecast: {period['detailedForecast']}\n\"\"\"\n        forecasts.append(forecast)\n\n    return \"\\n---\\n\".join(forecasts)\n\nimport re\n\n@mcp.tool()\nasync def query_router(query: str) -> str:\n    \"\"\"Route the query to the correct weather tool.\"\"\"\n\n    # Check for alert queries with state code (CA, NY, etc.)\n    alert_match = re.search(r'\\b(alerts?|warnings?)\\b.*\\b([A-Z]{2})\\b', query, re.I)\n    if alert_match:\n        state = alert_match.group(2).upper()\n        return await get_alerts(state)\n\n    # Check for forecast with lat, lon coordinates\n    coords_match = re.search(r'forecast.*?(-?\\d+\\.\\d+)[ ,]+(-?\\d+\\.\\d+)', query, re.I)\n    if coords_match:\n        lat = float(coords_match.group(1))\n        lon = float(coords_match.group(2))\n        return await get_forecast(lat, lon)\n\n    # Basic city name matching for demo\n    if \"new york\" in query.lower():\n        return await get_forecast(40.7831, -73.9712)\n    if \"san francisco\" in query.lower():\n        return await get_forecast(37.7749, -122.4194)\n\n    return \"Sorry, I couldn't understand your request. Please specify a state code for alerts or coordinates for forecast.\"\n\n\nif __name__ == \"__main__\":\n    # Initialize and run the server\n    mcp.run(transport='stdio')\n\n\n>>>>>>> 715dfa8 (Feature: Deep Search | Web Search)\n","size_bytes":10887},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    if (!res.headersSent) {\n      res.status(status).json({ message });\n    }\n    console.error(err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2111},"server/mcp-client.ts":{"content":"import { EventEmitter } from 'events';\nimport { spawn, ChildProcess } from 'child_process';\nimport { randomUUID } from 'crypto';\nimport { promises as fs } from 'fs';\n\ninterface ChatMessage {\n  role: 'user' | 'assistant' | 'system' | 'tool';\n  content: string | null;\n  tool_call_id?: string;\n  tool_calls?: ToolCall[];\n}\n\ninterface StreamChunk {\n  content?: string;\n  finished?: boolean;\n  error?: string;\n}\n\ninterface MCPTool {\n  name: string;\n  description: string;\n  inputSchema: any;\n}\n\ninterface ToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n  };\n}\n\nexport class MCPChatClient extends EventEmitter {\n  private apiKey: string;\n  private apiUrl: string;\n  private model: string;\n  private weatherServer: ChildProcess | null = null;\n  private searchServer: ChildProcess | null = null;\n  private availableTools: MCPTool[] = [];\n  private pendingRequests: Map<string, { resolve: Function; reject: Function }> = new Map();\n\n  constructor(apiKey: string, apiUrl = 'https://api.deepseek.com', model = 'deepseek-chat') {\n    super();\n    this.apiKey = apiKey;\n    this.apiUrl = apiUrl;\n    this.model = model;\n    \n    this.initializeWeatherServer();\n    this.initializeSearchServer();\n  }\n\n  private async initializeWeatherServer() {\n    try {\n      // Create the weather server file\n      const weatherServerCode = `#!/usr/bin/env python3\nimport json\nimport sys\nimport asyncio\nimport httpx\nfrom typing import Any, Dict\n\n# Weather tools implementation\nclass WeatherTools:\n    NWS_API_BASE = \"https://api.weather.gov\"\n    USER_AGENT = \"weather-app/1.0\"\n    \n    async def make_nws_request(self, url: str) -> Dict[str, Any] | None:\n        \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n        headers = {\n            \"User-Agent\": self.USER_AGENT,\n            \"Accept\": \"application/geo+json\"\n        }\n        async with httpx.AsyncClient() as client:\n            try:\n                response = await client.get(url, headers=headers, timeout=30.0)\n                response.raise_for_status()\n                return response.json()\n            except Exception:\n                return None\n\n    def format_alert(self, feature: dict) -> str:\n        \"\"\"Format an alert feature into a readable string.\"\"\"\n        props = feature[\"properties\"]\n        return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n\n    async def get_alerts(self, state: str) -> str:\n        \"\"\"Get weather alerts for a US state.\"\"\"\n        url = f\"{self.NWS_API_BASE}/alerts/active/area/{state}\"\n        data = await self.make_nws_request(url)\n\n        if not data or \"features\" not in data:\n            return \"Unable to fetch alerts or no alerts found.\"\n\n        if not data[\"features\"]:\n            return \"No active alerts for this state.\"\n\n        alerts = [self.format_alert(feature) for feature in data[\"features\"]]\n        return \"\\\\n---\\\\n\".join(alerts)\n\n    async def get_forecast(self, latitude: float, longitude: float) -> str:\n        \"\"\"Get weather forecast for a location.\"\"\"\n        points_url = f\"{self.NWS_API_BASE}/points/{latitude},{longitude}\"\n        points_data = await self.make_nws_request(points_url)\n\n        if not points_data:\n            return \"Unable to fetch forecast data for this location.\"\n\n        forecast_url = points_data[\"properties\"][\"forecast\"]\n        forecast_data = await self.make_nws_request(forecast_url)\n\n        if not forecast_data:\n            return \"Unable to fetch detailed forecast.\"\n\n        periods = forecast_data[\"properties\"][\"periods\"]\n        forecasts = []\n        for period in periods[:5]:\n            forecast = f\"\"\"\n{period['name']}:\nTemperature: {period['temperature']}°{period['temperatureUnit']}\nWind: {period['windSpeed']} {period['windDirection']}\nForecast: {period['detailedForecast']}\n\"\"\"\n            forecasts.append(forecast)\n\n        return \"\\\\n---\\\\n\".join(forecasts)\n\n    async def get_weather_by_city(self, city: str) -> str:\n        \"\"\"Get weather forecast for a city by name.\"\"\"\n        city_coords = {\n            \"new york\": (40.7831, -73.9712),\n            \"san francisco\": (37.7749, -122.4194),\n            \"los angeles\": (34.0522, -118.2437),\n            \"chicago\": (41.8781, -87.6298),\n            \"houston\": (29.7604, -95.3698),\n            \"miami\": (25.7617, -80.1918),\n            \"seattle\": (47.6062, -122.3321),\n            \"denver\": (39.7392, -104.9903),\n            \"atlanta\": (33.7490, -84.3880),\n            \"boston\": (42.3601, -71.0589),\n            \"dhaka\": (23.8103, 90.4125),\n            \"washington\": (38.9072, -77.0369),\n            \"philadelphia\": (39.9526, -75.1652),\n            \"phoenix\": (33.4484, -112.0740),\n            \"las vegas\": (36.1699, -115.1398)\n        }\n        \n        city_lower = city.lower().strip()\n        \n        if city_lower in city_coords:\n            lat, lon = city_coords[city_lower]\n            return await self.get_forecast(lat, lon)\n        else:\n            return f\"Sorry, I don't have coordinates for '{city}'. Available cities: {', '.join(city_coords.keys())}\"\n\n# MCP Server implementation\nclass MCPServer:\n    def __init__(self):\n        self.weather = WeatherTools()\n        self.tools = {\n            \"get_forecast\": {\n                \"name\": \"get_forecast\",\n                \"description\": \"Get weather forecast for a location using latitude and longitude coordinates\",\n                \"inputSchema\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"latitude\": {\"type\": \"number\", \"description\": \"Latitude of the location\"},\n                        \"longitude\": {\"type\": \"number\", \"description\": \"Longitude of the location\"}\n                    },\n                    \"required\": [\"latitude\", \"longitude\"]\n                }\n            },\n            \"get_weather_by_city\": {\n                \"name\": \"get_weather_by_city\",\n                \"description\": \"Get weather forecast for a city by name (supports major US cities and Dhaka)\",\n                \"inputSchema\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"city\": {\"type\": \"string\", \"description\": \"Name of the city (e.g., 'New York', 'San Francisco', 'Dhaka')\"}\n                    },\n                    \"required\": [\"city\"]\n                }\n            },\n            \"get_alerts\": {\n                \"name\": \"get_alerts\",\n                \"description\": \"Get weather alerts for a US state\",\n                \"inputSchema\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"state\": {\"type\": \"string\", \"description\": \"Two-letter US state code (e.g., 'CA', 'NY')\"}\n                    },\n                    \"required\": [\"state\"]\n                }\n            }\n        }\n\n    async def handle_request(self, request):\n        method = request.get(\"method\")\n        params = request.get(\"params\", {})\n        \n        if method == \"tools/list\":\n            return {\"tools\": list(self.tools.values())}\n        \n        elif method == \"tools/call\":\n            tool_name = params.get(\"name\")\n            arguments = params.get(\"arguments\", {})\n            \n            if tool_name == \"get_forecast\":\n                result = await self.weather.get_forecast(arguments[\"latitude\"], arguments[\"longitude\"])\n            elif tool_name == \"get_weather_by_city\":\n                result = await self.weather.get_weather_by_city(arguments[\"city\"])\n            elif tool_name == \"get_alerts\":\n                result = await self.weather.get_alerts(arguments[\"state\"])\n            else:\n                return {\"error\": {\"code\": -32601, \"message\": f\"Unknown tool: {tool_name}\"}}\n            \n            return {\"content\": [{\"type\": \"text\", \"text\": result}]}\n        \n        else:\n            return {\"error\": {\"code\": -32601, \"message\": f\"Unknown method: {method}\"}}\n\nasync def main():\n    server = MCPServer()\n    \n    while True:\n        try:\n            line = input()\n            if not line.strip():\n                continue\n                \n            request = json.loads(line)\n            result = await server.handle_request(request)\n            \n            response = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": request.get(\"id\"),\n                \"result\": result\n            }\n            \n            print(json.dumps(response))\n            sys.stdout.flush()\n            \n        except EOFError:\n            break\n        except Exception as e:\n            error_response = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": request.get(\"id\") if 'request' in locals() else None,\n                \"error\": {\"code\": -32000, \"message\": str(e)}\n            }\n            print(json.dumps(error_response))\n            sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n`;\n\n      // Write the weather server file\n      await fs.writeFile('weather_server.py', weatherServerCode);\n\n      // Start the weather server process\n      this.weatherServer = spawn('python3', ['weather_server.py'], {\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n\n      // Set up communication handlers\n      this.setupServerCommunication();\n      \n      // Initialize tools list\n      await this.listTools();\n      \n      console.log('Weather MCP server initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize weather server:', error);\n    }\n  }\n\n  private async initializeSearchServer() {\n    try {\n      // Start the search server process\n      this.searchServer = spawn('python3', ['search_server.py'], {\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n\n      // Set up communication handlers for search server\n      this.setupSearchServerCommunication();\n      \n      console.log('Search MCP server initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize search server:', error);\n    }\n  }\n\n  private setupServerCommunication() {\n    if (!this.weatherServer) return;\n\n    this.weatherServer.stdout?.on('data', (data) => {\n      const lines = data.toString().split('\\n').filter((line: string) => line.trim());\n      \n      for (const line of lines) {\n        try {\n          const message = JSON.parse(line);\n          \n          if (message.id && this.pendingRequests.has(message.id)) {\n            const { resolve, reject } = this.pendingRequests.get(message.id)!;\n            this.pendingRequests.delete(message.id);\n            \n            if (message.error) {\n              reject(new Error(message.error.message || 'MCP Error'));\n            } else {\n              resolve(message.result);\n            }\n          }\n        } catch (error) {\n          // Ignore parsing errors\n        }\n      }\n    });\n\n    this.weatherServer.stderr?.on('data', (data) => {\n      console.error('Weather server error:', data.toString());\n    });\n  }\n\n  private setupSearchServerCommunication() {\n    if (!this.searchServer) return;\n\n    this.searchServer.stdout?.on('data', (data) => {\n      const lines = data.toString().split('\\n').filter((line: string) => line.trim());\n      \n      for (const line of lines) {\n        try {\n          const message = JSON.parse(line);\n          \n          if (message.id && this.pendingRequests.has(message.id)) {\n            const { resolve, reject } = this.pendingRequests.get(message.id)!;\n            this.pendingRequests.delete(message.id);\n            \n            if (message.error) {\n              reject(new Error(message.error.message || 'MCP Error'));\n            } else {\n              resolve(message.result);\n            }\n          }\n        } catch (error) {\n          // Ignore parsing errors\n        }\n      }\n    });\n\n    this.searchServer.stderr?.on('data', (data) => {\n      console.error('Search server error:', data.toString());\n    });\n  }\n\n  private async sendMCPRequest(method: string, params: any = {}, serverType: 'weather' | 'search' = 'weather'): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const server = serverType === 'weather' ? this.weatherServer : this.searchServer;\n      \n      if (!server?.stdin) {\n        reject(new Error(`${serverType} server not available`));\n        return;\n      }\n\n      const id = randomUUID();\n      const request = {\n        jsonrpc: '2.0',\n        id,\n        method,\n        params\n      };\n\n      this.pendingRequests.set(id, { resolve, reject });\n\n      try {\n        server.stdin.write(JSON.stringify(request) + '\\n');\n      } catch (error) {\n        this.pendingRequests.delete(id);\n        reject(error);\n      }\n\n      // Set timeout\n      setTimeout(() => {\n        if (this.pendingRequests.has(id)) {\n          this.pendingRequests.delete(id);\n          reject(new Error(`${serverType} server request timeout`));\n        }\n      }, 45000); // Longer timeout for search operations\n    });\n  }\n\n  private async listTools(): Promise<void> {\n    try {\n      // Get tools from both servers\n      const [weatherResponse, searchResponse] = await Promise.allSettled([\n        this.sendMCPRequest('tools/list', {}, 'weather'),\n        this.sendMCPRequest('tools/list', {}, 'search')\n      ]);\n\n      this.availableTools = [];\n      \n      if (weatherResponse.status === 'fulfilled') {\n        this.availableTools.push(...(weatherResponse.value.tools || []));\n      }\n      \n      if (searchResponse.status === 'fulfilled') {\n        this.availableTools.push(...(searchResponse.value.tools || []));\n      }\n    } catch (error) {\n      console.error('Failed to list MCP tools:', error);\n      this.availableTools = [];\n    }\n  }\n\n  private async callTool(name: string, arguments_: any): Promise<string> {\n    try {\n      // Determine which server to use based on tool name\n      const isSearchTool = ['web_search', 'deep_research'].includes(name);\n      const serverType = isSearchTool ? 'search' : 'weather';\n      \n      const response = await this.sendMCPRequest('tools/call', {\n        name,\n        arguments: arguments_\n      }, serverType);\n      \n      if (response.content && response.content[0]) {\n        return response.content[0].text || JSON.stringify(response.content[0]);\n      }\n      \n      return JSON.stringify(response);\n    } catch (error) {\n      return `Error calling tool ${name}: ${error instanceof Error ? error.message : String(error)}`;\n    }\n  }\n\n  async *chatStream(messages: ChatMessage[]): AsyncGenerator<StreamChunk> {\n    try {\n      // Convert tools to OpenAI format\n      const tools = this.availableTools.map(tool => ({\n        type: 'function' as const,\n        function: {\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema\n        }\n      }));\n\n      const response = await fetch(`${this.apiUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: messages,\n          stream: true,\n          tools: tools.length > 0 ? tools : undefined,\n          tool_choice: 'auto'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('No response body');\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let toolCalls: ToolCall[] = [];\n      let pendingToolResults: string[] = [];\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6).trim();\n            if (data === '[DONE]') {\n              break;\n            }\n\n            try {\n              const parsed = JSON.parse(data);\n              const delta = parsed.choices?.[0]?.delta;\n\n              if (delta?.content) {\n                yield { content: delta.content };\n              }\n\n              if (delta?.tool_calls) {\n                for (const toolCall of delta.tool_calls) {\n                  const index = toolCall.index || 0;\n                  if (!toolCalls[index]) {\n                    toolCalls[index] = {\n                      id: toolCall.id || `call_${Date.now()}_${index}`,\n                      type: 'function',\n                      function: {\n                        name: toolCall.function?.name || '',\n                        arguments: toolCall.function?.arguments || ''\n                      }\n                    };\n                  } else {\n                    if (toolCall.function?.name) {\n                      toolCalls[index].function.name += toolCall.function.name;\n                    }\n                    if (toolCall.function?.arguments) {\n                      toolCalls[index].function.arguments += toolCall.function.arguments;\n                    }\n                  }\n                }\n              }\n\n              if (parsed.choices?.[0]?.finish_reason === 'tool_calls') {\n                // Process tool calls\n                for (const toolCall of toolCalls) {\n                  const toolName = toolCall.function.name;\n                  let toolArgs;\n                  \n                  try {\n                    toolArgs = JSON.parse(toolCall.function.arguments);\n                  } catch (e) {\n                    yield { content: `\\n\\nError parsing tool arguments for ${toolName}: ${toolCall.function.arguments}` };\n                    continue;\n                  }\n\n                  if (toolName === 'get_forecast') {\n                    yield { content: `\\n\\n🌤️ Getting weather forecast for coordinates ${toolArgs.latitude}, ${toolArgs.longitude}...\\n\\n` };\n                  } else if (toolName === 'get_weather_by_city') {\n                    yield { content: `\\n\\n🌤️ Getting weather forecast for ${toolArgs.city}...\\n\\n` };\n                  } else if (toolName === 'get_alerts') {\n                    yield { content: `\\n\\n⚠️ Getting weather alerts for ${toolArgs.state}...\\n\\n` };\n                  } else if (toolName === 'web_search') {\n                    yield { content: `\\n\\n🔍 Searching the web for \"${toolArgs.query}\"...\\n\\n` };\n                  } else if (toolName === 'deep_research') {\n                    yield { content: `\\n\\n🔬 Conducting deep research on \"${toolArgs.query}\"...\\n\\n` };\n                  }\n\n                  const toolResult = await this.callTool(toolName, toolArgs);\n                  \n                  if (toolName === 'web_search' || toolName === 'deep_research') {\n                    yield { content: `${toolResult}\\n\\n` };\n                    pendingToolResults.push(toolResult);\n                  } else {\n                    yield { content: toolResult };\n                  }\n                }\n\n                // If there were search tool results, send them back to the model\n                if (pendingToolResults.length > 0) {\n                  const followUpMessages = [\n                    ...messages,\n                    {\n                      role: 'assistant' as const,\n                      content: null,\n                      tool_calls: toolCalls.map(tc => ({\n                        id: tc.id,\n                        type: tc.type,\n                        function: tc.function\n                      }))\n                    },\n                    ...toolCalls.map((tc, index) => ({\n                      role: 'tool' as const,\n                      tool_call_id: tc.id,\n                      content: pendingToolResults[index] || 'No result'\n                    }))\n                  ];\n\n                  // Recursive call to continue the conversation\n                  for await (const chunk of this.chatStream(followUpMessages)) {\n                    yield chunk;\n                  }\n                  return;\n                }\n              }\n\n              if (parsed.choices?.[0]?.finish_reason === 'stop' || parsed.choices?.[0]?.finish_reason === 'tool_calls') {\n                break;\n              }\n            } catch (e) {\n              // Ignore JSON parsing errors for streaming data\n            }\n          }\n        }\n      }\n\n      yield { finished: true };\n    } catch (error) {\n      yield { error: error instanceof Error ? error.message : 'Unknown error occurred' };\n    }\n  }\n\n  async chat(messages: ChatMessage[]): Promise<string> {\n    const chunks: string[] = [];\n    \n    for await (const chunk of this.chatStream(messages)) {\n      if (chunk.error) {\n        throw new Error(chunk.error);\n      }\n      if (chunk.content) {\n        chunks.push(chunk.content);\n      }\n      if (chunk.finished) {\n        break;\n      }\n    }\n    \n    return chunks.join('');\n  }\n\n  // Generate a title for a conversation based on the first message\n  async generateTitle(firstMessage: string): Promise<string> {\n    try {\n      const response = await fetch(`${this.apiUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [\n            {\n              role: 'system',\n              content: 'You are a helpful assistant that creates short, descriptive titles for conversations. Generate a brief title (max 6 words) that captures the essence of the user\\'s message. Return only the title, no extra text.'\n            },\n            {\n              role: 'user',\n              content: firstMessage\n            }\n          ],\n          max_tokens: 20,\n          temperature: 0.7\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const title = data.choices?.[0]?.message?.content?.trim() || '';\n      \n      return title.replace(/[\"']/g, '') || firstMessage.split(' ').slice(0, 6).join(' ');\n    } catch (error) {\n      // Fallback to first few words if AI title generation fails\n      return firstMessage.split(' ').slice(0, 6).join(' ');\n    }\n  }\n\n  cleanup() {\n    if (this.weatherServer) {\n      this.weatherServer.kill();\n      this.weatherServer = null;\n    }\n    if (this.searchServer) {\n      this.searchServer.kill();\n      this.searchServer = null;\n    }\n  }\n}","size_bytes":22725},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { MCPChatClient } from \"./mcp-client\";\nimport { insertConversationSchema, insertMessageSchema, signupSchema, loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { getSession, isAuthenticated, hashPassword, verifyPassword } from \"./auth\";\n\n// Initialize MCP client with environment variable or fallback\nconst mcpClient = new MCPChatClient(\n  process.env.DEEPSEEK_API_KEY || \"sk-1414609620f448b6966346842d3b64db\"\n);\n\n// For demo purposes, we'll use a hardcoded user ID\nconst DEMO_USER_ID = \"demo-user\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup session middleware\n  app.use(getSession());\n\n  // Authentication routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const validatedData = signupSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: 'User with this email already exists' });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(validatedData.password);\n      \n      // Generate username from email\n      const username = validatedData.email.split('@')[0];\n      \n      // Create user\n      const user = await storage.createUser({\n        ...validatedData,\n        username,\n        password: hashedPassword,\n      });\n\n      // Create session\n      if (req.session) {\n        req.session.userId = user.id;\n        req.session.user = user;\n      }\n\n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json({ user: userWithoutPassword });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Validation failed', details: error.errors });\n      }\n      console.error('Signup error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user) {\n        return res.status(401).json({ error: 'Invalid email or password' });\n      }\n\n      // Verify password\n      const isValidPassword = await verifyPassword(validatedData.password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: 'Invalid email or password' });\n      }\n\n      // Create session\n      if (req.session) {\n        req.session.userId = user.id;\n        req.session.user = user;\n      }\n\n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Validation failed', details: error.errors });\n      }\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    if (req.session) {\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ error: 'Could not log out' });\n        }\n        res.json({ message: 'Logged out successfully' });\n      });\n    } else {\n      res.json({ message: 'Logged out successfully' });\n    }\n  });\n\n  app.get('/api/auth/me', isAuthenticated, (req, res) => {\n    if (req.session && req.session.user) {\n      const { password, ...userWithoutPassword } = req.session.user;\n      res.json({ user: userWithoutPassword });\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  });\n\n  // Protected routes - require authentication\n  // Get all conversations for a user\n  app.get('/api/conversations', isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'User not authenticated' });\n      }\n      const conversations = await storage.getConversationsByUserId(userId);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch conversations' });\n    }\n  });\n\n  // Get a specific conversation with messages\n  app.get('/api/conversations/:id', isAuthenticated, async (req, res) => {\n    try {\n      const conversation = await storage.getConversation(req.params.id);\n      if (!conversation) {\n        return res.status(404).json({ error: 'Conversation not found' });\n      }\n      \n      const messages = await storage.getMessagesByConversationId(req.params.id);\n      res.json({ conversation, messages });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch conversation' });\n    }\n  });\n\n  // Create a new conversation\n  app.post('/api/conversations', isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'User not authenticated' });\n      }\n      const validatedData = insertConversationSchema.parse({\n        ...req.body,\n        userId\n      });\n      \n      const conversation = await storage.createConversation(validatedData);\n      res.status(201).json(conversation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Invalid data', details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to create conversation' });\n    }\n  });\n\n  // Delete a conversation\n  app.delete('/api/conversations/:id', isAuthenticated, async (req, res) => {\n    try {\n      const deleted = await storage.deleteConversation(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ error: 'Conversation not found' });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete conversation' });\n    }\n  });\n\n  // Create new conversation with initial message (simple, fast response)\n  app.post('/api/chat/new', isAuthenticated, async (req, res) => {\n    try {\n      const { message } = req.body;\n      const userId = req.session?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: 'User not authenticated' });\n      }\n      \n      if (!message || !message.trim()) {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n      \n      // Generate title for the conversation (quick operation)\n      const title = await mcpClient.generateTitle(message);\n      \n      // Create new conversation\n      const conversation = await storage.createConversation({\n        userId,\n        title\n      });\n\n      // Save user message\n      await storage.createMessage({\n        conversationId: conversation.id,\n        role: 'user',\n        content: message,\n        metadata: null\n      });\n\n      // Return conversation ID immediately - no streaming here\n      res.json({ \n        conversationId: conversation.id,\n        success: true \n      });\n    } catch (error) {\n      console.error('Error in /api/chat/new:', error);\n      res.status(500).json({ error: 'Failed to create new chat' });\n    }\n  });\n\n  // Chat endpoint for streaming responses\n  app.post('/api/chat/:conversationId', isAuthenticated, async (req, res) => {\n    try {\n      const { message, skipSaveMessage = false } = req.body;\n      const conversationId = req.params.conversationId;\n      \n      // Validate conversation exists\n      const conversation = await storage.getConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ error: 'Conversation not found' });\n      }\n\n      // Save user message (unless we're continuing from an already saved message)\n      if (!skipSaveMessage && message && message.trim()) {\n        await storage.createMessage({\n          conversationId,\n          role: 'user',\n          content: message,\n          metadata: null\n        });\n      }\n\n      // Get conversation history for context\n      const messages = await storage.getMessagesByConversationId(conversationId);\n      const chatMessages = messages.map(msg => ({\n        role: msg.role as 'user' | 'assistant' | 'system',\n        content: msg.content\n      }));\n\n      // Set up SSE headers\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n      });\n\n      let assistantResponse = '';\n\n      try {\n        // Stream response from MCP client\n        for await (const chunk of mcpClient.chatStream(chatMessages)) {\n          if (chunk.error) {\n            res.write(`data: ${JSON.stringify({ error: chunk.error })}\\n\\n`);\n            break;\n          }\n          \n          if (chunk.content) {\n            assistantResponse += chunk.content;\n            res.write(`data: ${JSON.stringify({ content: chunk.content })}\\n\\n`);\n          }\n          \n          if (chunk.finished) {\n            res.write(`data: ${JSON.stringify({ finished: true })}\\n\\n`);\n            break;\n          }\n        }\n\n        // Save assistant response\n        if (assistantResponse) {\n          await storage.createMessage({\n            conversationId,\n            role: 'assistant',\n            content: assistantResponse,\n            metadata: null\n          });\n\n          // Update conversation timestamp\n          await storage.updateConversation(conversationId, { updatedAt: new Date() });\n        }\n\n      } catch (error) {\n        res.write(`data: ${JSON.stringify({ error: 'Failed to get AI response' })}\\n\\n`);\n      }\n\n      res.end();\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to process chat message' });\n    }\n  });\n\n\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9988},"server/storage.ts":{"content":"import { type User, type InsertUser, type Conversation, type InsertConversation, type Message, type InsertMessage, users, conversations, messages } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Conversation methods\n  getConversation(id: string): Promise<Conversation | undefined>;\n  getConversationsByUserId(userId: string): Promise<Conversation[]>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: string): Promise<boolean>;\n  \n  // Message methods\n  getMessagesByConversationId(conversationId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  deleteMessagesByConversationId(conversationId: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private conversations: Map<string, Conversation>;\n  private messages: Map<string, Message>;\n\n  constructor() {\n    this.users = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    \n    // Initialize with sample data\n    setTimeout(() => this.initializeSampleData(), 0);\n  }\n\n  private async initializeSampleData() {\n    // Create a demo user with the expected ID\n    const user: User = {\n      id: \"demo-user\",\n      email: null,\n      username: \"Judha Mayapetiya\",\n      password: \"sample123\",\n      firstName: null,\n      lastName: null,\n      profileImageUrl: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(user.id, user);\n\n    // Create sample conversations with proper dates\n    const now = new Date();\n    const yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const weekAgo = new Date(now);\n    weekAgo.setDate(weekAgo.getDate() - 7);\n\n    const conv1 = await this.createConversation({\n      userId: user.id,\n      title: \"What's something you've learned recently?\"\n    });\n    conv1.createdAt = yesterday;\n    conv1.updatedAt = yesterday;\n\n    const conv2 = await this.createConversation({\n      userId: user.id,\n      title: \"If you could teleport anywhere right now...\"\n    });\n    conv2.createdAt = yesterday;\n    conv2.updatedAt = yesterday;\n\n    const conv3 = await this.createConversation({\n      userId: user.id,\n      title: \"What's one goal you want to achieve?\"\n    });\n    conv3.createdAt = yesterday;\n    conv3.updatedAt = yesterday;\n\n    const conv4 = await this.createConversation({\n      userId: user.id,\n      title: \"Ask me anything weird or random\"\n    });\n    conv4.createdAt = weekAgo;\n    conv4.updatedAt = weekAgo;\n\n    const conv5 = await this.createConversation({\n      userId: user.id,\n      title: \"How are you feeling today, really?\"\n    });\n    conv5.createdAt = weekAgo;\n    conv5.updatedAt = weekAgo;\n\n    const conv6 = await this.createConversation({\n      userId: user.id,\n      title: \"What's one habit you wish you had?\"\n    });\n    conv6.createdAt = weekAgo;\n    conv6.updatedAt = weekAgo;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    return this.conversations.get(id);\n  }\n\n  async getConversationsByUserId(userId: string): Promise<Conversation[]> {\n    return Array.from(this.conversations.values())\n      .filter((conv) => conv.userId === userId)\n      .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = randomUUID();\n    const now = new Date();\n    const conversation: Conversation = {\n      ...insertConversation,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return undefined;\n    \n    const updated = { ...conversation, ...updates, updatedAt: new Date() };\n    this.conversations.set(id, updated);\n    return updated;\n  }\n\n  async deleteConversation(id: string): Promise<boolean> {\n    const deleted = this.conversations.delete(id);\n    if (deleted) {\n      await this.deleteMessagesByConversationId(id);\n    }\n    return deleted;\n  }\n\n  async getMessagesByConversationId(conversationId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter((msg) => msg.conversationId === conversationId)\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      createdAt: new Date(),\n      metadata: insertMessage.metadata ?? null,\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async deleteMessagesByConversationId(conversationId: string): Promise<void> {\n    const messagesToDelete = Array.from(this.messages.values())\n      .filter((msg) => msg.conversationId === conversationId);\n    \n    for (const message of messagesToDelete) {\n      this.messages.delete(message.id);\n    }\n  }\n}\n\n// Database storage implementation using Supabase\nexport class DatabaseStorage implements IStorage {\n  private db;\n\n  constructor() {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL environment variable is required\");\n    }\n    \n    const client = postgres(process.env.DATABASE_URL);\n    this.db = drizzle(client);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await this.db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const result = await this.db.select().from(conversations).where(eq(conversations.id, id));\n    return result[0];\n  }\n\n  async getConversationsByUserId(userId: string): Promise<Conversation[]> {\n    const result = await this.db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.updatedAt));\n    return result;\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const result = await this.db.insert(conversations).values(insertConversation).returning();\n    return result[0];\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const result = await this.db\n      .update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteConversation(id: string): Promise<boolean> {\n    // First delete all messages in the conversation\n    await this.deleteMessagesByConversationId(id);\n    \n    // Then delete the conversation\n    const result = await this.db.delete(conversations).where(eq(conversations.id, id));\n    return result.length > 0;\n  }\n\n  async getMessagesByConversationId(conversationId: string): Promise<Message[]> {\n    const result = await this.db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n    return result;\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const result = await this.db.insert(messages).values(insertMessage).returning();\n    return result[0];\n  }\n\n  async deleteMessagesByConversationId(conversationId: string): Promise<void> {\n    await this.db.delete(messages).where(eq(messages.conversationId, conversationId));\n  }\n}\n\n// Use DatabaseStorage for production, MemStorage for development/testing\nexport const storage = process.env.DATABASE_URL ? new DatabaseStorage() : new MemStorage();\n","size_bytes":9515},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: json(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  username: text(\"username\").unique(),\n  password: text(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id),\n  role: varchar(\"role\", { enum: [\"user\", \"assistant\", \"system\"] }).notNull(),\n  content: text(\"content\").notNull(),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const signupSchema = insertUserSchema.omit({ username: true }).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type SignupUser = z.infer<typeof signupSchema>;\nexport type LoginUser = z.infer<typeof loginSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n","size_bytes":2878},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/home\";\nimport ConversationPage from \"@/pages/conversation\";\nimport AuthPage from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={AuthPage} />\n      <Route path=\"/\" component={isAuthenticated ? Home : AuthPage} />\n      <Route path=\"/conversation/:id\" component={isAuthenticated ? ConversationPage : AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1406},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* BeeBot specific colors */\n  --brand-blue: hsl(221.2, 83.2%, 53.3%);\n  --brand-purple: hsl(262.1, 83.3%, 57.8%);\n  --slate-50: hsl(210, 40%, 98%);\n  --slate-100: hsl(210, 40%, 96%);\n  --slate-200: hsl(214.3, 31.8%, 91.4%);\n  --slate-400: hsl(215, 20.2%, 65.1%);\n  --slate-500: hsl(215.4, 16.3%, 46.9%);\n  --slate-600: hsl(215.3, 19.3%, 34.5%);\n  --slate-700: hsl(215.3, 25%, 26.7%);\n  --slate-800: hsl(222.2, 84%, 4.9%);\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-slate-50 font-sans antialiased text-slate-800 overflow-hidden;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .brand-gradient {\n    background: linear-gradient(135deg, var(--brand-blue), var(--brand-purple));\n  }\n}\n","size_bytes":2884},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/conversation-history.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ChevronDown } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport type { Conversation } from \"@shared/schema\";\n\ninterface ConversationHistoryProps {\n  onSelectConversation?: (conversationId: string) => void;\n}\n\nexport default function ConversationHistory({ onSelectConversation }: ConversationHistoryProps) {\n  const [, setLocation] = useLocation();\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({\n    recent: true,\n    week: true,\n  });\n\n  const { data: conversations = [], isLoading } = useQuery({\n    queryKey: ['/api/conversations'],\n    enabled: true,\n  });\n\n  const toggleSection = (sectionId: string) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [sectionId]: !prev[sectionId]\n    }));\n  };\n\n  const handleConversationClick = (conversationId: string) => {\n    if (onSelectConversation) {\n      onSelectConversation(conversationId);\n    } else {\n      setLocation(`/conversation/${conversationId}`);\n    }\n  };\n\n  // Group conversations by time period\n  const groupConversationsByTime = (conversations: Conversation[]) => {\n    const now = new Date();\n    const yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const weekAgo = new Date(now);\n    weekAgo.setDate(weekAgo.getDate() - 7);\n\n    const recent: Conversation[] = [];\n    const week: Conversation[] = [];\n\n    conversations.forEach(conv => {\n      const convDate = new Date(conv.updatedAt);\n      if (convDate >= yesterday) {\n        recent.push(conv);\n      } else if (convDate >= weekAgo) {\n        week.push(conv);\n      }\n    });\n\n    return { recent, week };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"mt-8\" data-testid=\"conversation-history\">\n        <div className=\"space-y-2\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"w-full h-12 bg-slate-100 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const { recent, week } = groupConversationsByTime(conversations);\n\n  return (\n    <div className=\"mt-8\" data-testid=\"conversation-history\">\n      {/* Recent Section */}\n      {recent.length > 0 && (\n        <div className=\"mb-6\">\n          <button\n            onClick={() => toggleSection(\"recent\")}\n            className=\"flex items-center justify-between w-full text-left text-xs font-medium text-slate-500 uppercase tracking-wider mb-3 hover:text-slate-700 transition-colors duration-150\"\n            data-testid=\"button-toggle-recent\"\n          >\n            <span>Recent</span>\n            <ChevronDown \n              className={`w-4 h-4 transform transition-transform duration-150 ${\n                expandedSections.recent ? \"rotate-0\" : \"-rotate-90\"\n              }`} \n            />\n          </button>\n          {expandedSections.recent && (\n            <div className=\"space-y-2\" data-testid=\"section-recent\">\n              {recent.map((conversation) => (\n                <button\n                  key={conversation.id}\n                  onClick={() => handleConversationClick(conversation.id)}\n                  className=\"w-full text-left p-3 text-slate-600 hover:text-slate-800 hover:bg-slate-50 rounded-lg transition-colors duration-150 border border-transparent hover:border-slate-200 text-[12px] pt-[5px] pb-[5px]\"\n                  data-testid={`button-history-conversation-${conversation.id}`}\n                >\n                  {conversation.title}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      {/* Week Section */}\n      {week.length > 0 && (\n        <div className=\"mb-6\">\n          <button\n            onClick={() => toggleSection(\"week\")}\n            className=\"flex items-center justify-between w-full text-left text-xs font-medium text-slate-500 uppercase tracking-wider mb-3 hover:text-slate-700 transition-colors duration-150\"\n            data-testid=\"button-toggle-week\"\n          >\n            <span>7 Days Ago</span>\n            <ChevronDown \n              className={`w-4 h-4 transform transition-transform duration-150 ${\n                expandedSections.week ? \"rotate-0\" : \"-rotate-90\"\n              }`} \n            />\n          </button>\n          {expandedSections.week && (\n            <div className=\"space-y-2\" data-testid=\"section-week\">\n              {week.map((conversation) => (\n                <button\n                  key={conversation.id}\n                  onClick={() => handleConversationClick(conversation.id)}\n                  className=\"w-full text-left p-3 text-sm text-slate-600 hover:text-slate-800 hover:bg-slate-50 rounded-lg transition-colors duration-150 border border-transparent hover:border-slate-200\"\n                  data-testid={`button-history-conversation-${conversation.id}`}\n                >\n                  {conversation.title}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n      {/* Empty state */}\n      {conversations.length === 0 && !isLoading && (\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-slate-500\">No conversations yet</p>\n          <p className=\"text-xs text-slate-400 mt-1\">Start chatting to see your history here</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5343},"client/src/components/input-section.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Lightbulb, Globe, Search, Send, X } from \"lucide-react\";\n\ninterface InputSectionProps {\n  message: string;\n  onMessageChange: (message: string) => void;\n  onSendMessage: () => void;\n  onQuickAction: (action: string) => void;\n  disabled?: boolean;\n}\n\nexport default function InputSection({ \n  message, \n  onMessageChange, \n  onSendMessage, \n  onQuickAction,\n  disabled = false\n}: InputSectionProps) {\n  const [selectedTool, setSelectedTool] = useState<string | null>(null);\n  \n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {\n        e.preventDefault();\n        onSendMessage();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [onSendMessage]);\n\n  const tools = [\n    { id: 'reasoning', label: 'Reasoning', icon: Lightbulb },\n    { id: 'web-search', label: 'Web Search', icon: Globe },\n    { id: 'deep-research', label: 'Deep Research', icon: Search }\n  ];\n\n  const handleToolSelect = (toolId: string) => {\n    if (selectedTool === toolId) {\n      setSelectedTool(null);\n    } else {\n      setSelectedTool(toolId);\n    }\n    // Call onQuickAction to notify parent but don't change the input text\n    onQuickAction(toolId);\n  };\n\n  return (\n    <div className=\"bg-white border-t border-slate-200 p-6 pt-[16px] pb-[16px]\" data-testid=\"input-section\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"relative\">\n          <Textarea\n            value={message}\n            onChange={(e) => onMessageChange(e.target.value)}\n            rows={3}\n            placeholder=\"Initiate a query or send a command to the AI...\"\n            disabled={disabled}\n            className=\"flex min-h-[80px] bg-background px-3 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 md:text-sm w-full py-4 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-brand-blue focus:border-transparent resize-none text-slate-800 placeholder-slate-500 disabled:opacity-50 disabled:cursor-not-allowed pt-[30px] pb-[30px] pl-[20px] pr-[20px] mt-[0px] mb-[0px]\"\n            data-testid=\"textarea-message\"\n          />\n          \n          {/* Tool Selection Inside Input */}\n          <div className=\"absolute bottom-3 left-4 flex items-center space-x-2\">\n            {tools.map((tool) => {\n              const Icon = tool.icon;\n              const isSelected = selectedTool === tool.id;\n              return (\n                <Button\n                  key={tool.id}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleToolSelect(tool.id)}\n                  disabled={disabled}\n                  className=\"justify-center gap-2 whitespace-nowrap ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-9 flex items-center space-x-1 px-2 py-1 text-xs rounded-md transition-colors text-slate-500 hover:text-slate-700 hover:bg-slate-100 font-normal text-center bg-[#d1deeb59] pt-[0px] pb-[0px] pl-[14px] pr-[14px] ml-[4px] mr-[4px]\"\n                  data-testid={`tool-${tool.id}`}\n                >\n                  <Icon className=\"w-3 h-3\" />\n                  <span className=\"ml-[-3px] mr-[-3px]\">{tool.label}</span>\n                  {isSelected && <X className=\"w-3 h-3 ml-1\" />}\n                </Button>\n              );\n            })}\n          </div>\n          <Button\n            onClick={onSendMessage}\n            size=\"sm\"\n            disabled={disabled || !message.trim()}\n            className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 absolute right-3 bottom-3 w-8 h-8 p-0 bg-brand-blue hover:bg-blue-600 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed pl-[25px] pr-[25px] pt-[20px] pb-[20px]\"\n            aria-label=\"Send message\"\n            data-testid=\"button-send\"\n          >\n            {disabled ? (\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n            ) : (\n              <Send className=\"w-4 h-4\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Keyboard Shortcut Hint */}\n        <div className=\"flex justify-end mt-[3px] mb-[3px] pt-[5px] pb-[5px]\">\n          <div className=\"text-xs text-slate-500\">\n            Press <kbd className=\"px-2 py-1 bg-slate-100 rounded text-slate-600\">⌘</kbd> + <kbd className=\"px-2 py-1 bg-slate-100 rounded text-slate-600\">Enter</kbd> to send\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5238},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Home, Compass, Library, Clock, MoreHorizontal, LogOut, MoreVertical, Settings, UserCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { useLocation } from \"wouter\";\nimport { useAuth, useLogout } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ConversationHistory from \"./conversation-history\";\n\ninterface SidebarProps {\n  activeNav: string;\n  onNavChange: (nav: string) => void;\n}\n\nexport default function Sidebar({ activeNav, onNavChange }: SidebarProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const logoutMutation = useLogout();\n  const { toast } = useToast();\n\n  const navItems = [\n    { id: \"home\", label: \"Home\", icon: Home, path: \"/\" },\n    { id: \"explore\", label: \"Explore\", icon: Compass, path: \"/explore\" },\n    { id: \"library\", label: \"Library\", icon: Library, path: \"/library\" },\n    { id: \"history\", label: \"History\", icon: Clock, path: \"/history\" },\n  ];\n\n  const handleNavClick = (item: typeof navItems[0]) => {\n    onNavChange(item.id);\n    if (item.id === \"home\") {\n      setLocation(\"/\");\n    }\n    // Other navigation items can be implemented later\n  };\n\n  return (\n    <aside className=\"w-64 bg-white border-r border-slate-200 flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-slate-200 pl-[24px] pr-[24px] pt-[10px] pb-[10px]\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 brand-gradient rounded-lg flex items-center justify-center\">\n            <svg className=\"w-5 h-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n          <span className=\"text-lg font-semibold text-slate-800\" data-testid=\"text-logo\">BeeBot</span>\n        </div>\n      </div>\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 pt-[15px] pb-[15px]\">\n        {/* Search */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex h-10 w-full rounded-md border bg-background px-3 py-2 ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm pl-10 text-sm border-slate-200 focus:ring-2 focus:ring-brand-blue focus:border-transparent pt-[0px] pb-[0px] mt-[5px] mb-[5px]\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Navigation Items */}\n        <ul className=\"space-y-1 mt-[-11px] mb-[-11px]\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeNav === item.id;\n            return (\n              <li key={item.id}>\n                <button\n                  onClick={() => handleNavClick(item)}\n                  className=\"flex items-center space-x-3 px-3 py-2 font-medium rounded-lg transition-colors duration-150 w-full text-left pt-[9px] pb-[9px] bg-[#edf1f77a] text-[#424242] text-[14px]\"\n                  data-testid={`button-nav-${item.id}`}\n                  aria-label={item.label}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span className=\"font-normal ml-[7px] mr-[7px]\">{item.label}</span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n\n        <ConversationHistory />\n      </nav>\n      {/* User Profile & Logout */}\n      <div className=\"p-4 border-t border-slate-200 pt-[8px] pb-[8px]\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0 mr-2\">\n            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n              <span className=\"text-sm font-medium text-blue-600\">\n                {user?.firstName?.[0] || user?.username?.[0] || 'U'}\n              </span>\n            </div>\n            <div className=\"flex-1 min-w-0 overflow-hidden\">\n              <p className=\"truncate font-semibold text-[12px] text-[#374661] pt-[0px] pb-[0px] mt-[0px] mb-[0px]\">\n                {user?.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : user?.username}\n              </p>\n              <p className=\"text-xs text-slate-500 truncate\">{user?.email}</p>\n            </div>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-slate-500 hover:text-slate-700\"\n              >\n                <MoreVertical className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem className=\"cursor-pointer\">\n                <UserCircle className=\"w-4 h-4 mr-2\" />\n                Profile\n              </DropdownMenuItem>\n              <DropdownMenuItem className=\"cursor-pointer\">\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Settings\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                className=\"cursor-pointer text-red-600 focus:text-red-600\"\n                onClick={async () => {\n                  try {\n                    await logoutMutation.mutateAsync();\n                    toast({\n                      title: \"Logged out\",\n                      description: \"You have been logged out successfully.\",\n                    });\n                  } catch (error) {\n                    toast({\n                      title: \"Error\",\n                      description: \"Failed to log out. Please try again.\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                disabled={logoutMutation.isPending}\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":6941},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string = 'GET',\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1393},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/conversation.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/sidebar\";\nimport InputSection from \"@/components/input-section\";\nimport { MarkdownRenderer } from \"@/components/markdown-renderer\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusIcon, User, Bot, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Message, Conversation } from \"@shared/schema\";\n\ninterface ConversationData {\n  conversation: Conversation;\n  messages: Message[];\n}\n\nexport default function ConversationPage() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const [activeNav, setActiveNav] = useState(\"home\");\n  const [message, setMessage] = useState(\"\");\n  const [streamingMessage, setStreamingMessage] = useState(\"\");\n  const [isStreaming, setIsStreaming] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const conversationId = params.id;\n\n  const { data: conversationData, isLoading } = useQuery<ConversationData>({\n    queryKey: ['/api/conversations', conversationId],\n    enabled: !!conversationId,\n    retry: 3,\n    retryDelay: 500,\n  });\n\n  // Auto-trigger AI response for new conversations\n  useEffect(() => {\n    if (conversationData?.messages && conversationData.messages.length > 0 && !isStreaming) {\n      const messages = conversationData.messages;\n      const lastMessage = messages[messages.length - 1];\n      \n      // If the last message is from user and there's no assistant response, trigger AI response\n      if (lastMessage.role === 'user' && messages.length === 1 && !streamingMessage) {\n        // This is a new conversation with only the user's message - start AI response\n        setIsStreaming(true);\n        setStreamingMessage(\"\");\n        \n        // Start the AI response immediately\n        const triggerAIResponse = async () => {\n          try {\n            const response = await fetch(`/api/chat/${conversationId}`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({ message: lastMessage.content, skipSaveMessage: true }),\n            });\n\n            if (!response.ok) {\n              throw new Error('Failed to get AI response');\n            }\n\n            const reader = response.body?.getReader();\n            if (!reader) {\n              throw new Error('No response reader');\n            }\n\n            const decoder = new TextDecoder();\n            let buffer = '';\n\n            while (true) {\n              const { done, value } = await reader.read();\n              \n              if (done) break;\n\n              buffer += decoder.decode(value, { stream: true });\n              const lines = buffer.split('\\n');\n              buffer = lines.pop() || '';\n\n              for (const line of lines) {\n                if (line.startsWith('data: ')) {\n                  try {\n                    const data = JSON.parse(line.slice(6));\n                    \n                    if (data.content) {\n                      setStreamingMessage(prev => prev + data.content);\n                    }\n                    \n                    if (data.error) {\n                      toast({\n                        title: \"Error\",\n                        description: data.error,\n                        variant: \"destructive\",\n                      });\n                      break;\n                    }\n                    \n                    if (data.finished) {\n                      setStreamingMessage(\"\");\n                      setIsStreaming(false);\n                      queryClient.invalidateQueries({ queryKey: ['/api/conversations', conversationId] });\n                      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n                      break;\n                    }\n                  } catch (e) {\n                    // Skip malformed JSON\n                  }\n                }\n              }\n            }\n          } catch (error) {\n            toast({\n              title: \"Error\",\n              description: \"Failed to get AI response\",\n              variant: \"destructive\",\n            });\n          } finally {\n            setIsStreaming(false);\n            setStreamingMessage(\"\");\n          }\n        };\n        \n        // Start the AI response\n        triggerAIResponse();\n      }\n    }\n  }, [conversationData, conversationId, isStreaming, queryClient, toast]);\n\n  const deleteConversationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/conversations/${id}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n      setLocation('/');\n      toast({\n        title: \"Success\",\n        description: \"Conversation deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete conversation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // Show streaming when we're in a new conversation that might be loading\n  const shouldShowInitialStreaming = isLoading && !conversationData && !isStreaming;\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [conversationData?.messages, streamingMessage]);\n\n  const handleSendMessage = async () => {\n    if (!message.trim() || !conversationId || isStreaming) return;\n\n    const messageToSend = message;\n    setMessage(\"\");\n    setIsStreaming(true);\n    setStreamingMessage(\"\");\n\n    // Optimistically add user message to the UI immediately\n    queryClient.setQueryData(['/api/conversations', conversationId], (oldData: ConversationData | undefined) => {\n      if (!oldData) return oldData;\n      \n      const newMessage = {\n        id: `temp-${Date.now()}`,\n        conversationId,\n        role: 'user' as const,\n        content: messageToSend,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        metadata: null\n      };\n      \n      return {\n        ...oldData,\n        messages: [...oldData.messages, newMessage]\n      };\n    });\n\n    try {\n      const response = await fetch(`/api/chat/${conversationId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: messageToSend }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send message');\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('No response reader');\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        \n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6));\n              \n              if (data.content) {\n                setStreamingMessage(prev => prev + data.content);\n              }\n              \n              if (data.error) {\n                toast({\n                  title: \"Error\",\n                  description: data.error,\n                  variant: \"destructive\",\n                });\n                break;\n              }\n              \n              if (data.finished) {\n                setStreamingMessage(\"\");\n                setIsStreaming(false);\n                queryClient.invalidateQueries({ queryKey: ['/api/conversations', conversationId] });\n                queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n                break;\n              }\n            } catch (e) {\n              // Skip malformed JSON\n            }\n          }\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n      setMessage(messageToSend); // Restore message on error\n    } finally {\n      setIsStreaming(false);\n      setStreamingMessage(\"\");\n    }\n  };\n\n  const handleQuickAction = (action: string) => {\n    // Tools are activated but don't modify the input field text\n    // The tool selection will be handled visually through the UI state\n  };\n\n  const handleDeleteConversation = () => {\n    if (!conversationId) return;\n    deleteConversationMutation.mutate(conversationId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\" data-testid=\"conversation-page\">\n        <Sidebar activeNav={activeNav} onNavChange={setActiveNav} />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-brand-blue border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n            <p className=\"text-slate-600\">Loading conversation...</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!conversationData) {\n    return (\n      <div className=\"flex h-screen\" data-testid=\"conversation-page\">\n        <Sidebar activeNav={activeNav} onNavChange={setActiveNav} />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <p className=\"text-slate-600 mb-4\">Conversation not found</p>\n            <Button onClick={() => setLocation('/')}>\n              Go Home\n            </Button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const { conversation, messages } = conversationData;\n\n  return (\n    <div className=\"flex h-screen\" data-testid=\"conversation-page\">\n      <Sidebar activeNav={activeNav} onNavChange={setActiveNav} />\n      <main className=\"flex-1 flex flex-col min-w-0\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-slate-200 px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"font-semibold text-slate-800 text-[16px]\" data-testid=\"conversation-title\">\n                  {conversation.title}\n                </h1>\n                <p className=\"text-slate-500 text-[13px]\">\n                  Started {new Date(conversation.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDeleteConversation}\n                disabled={deleteConversationMutation.isPending}\n                className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                data-testid=\"button-delete-conversation\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete\n              </Button>\n              <Button \n                className=\"bg-slate-800 hover:bg-slate-700 text-white\"\n                onClick={() => setLocation('/')}\n                data-testid=\"button-new-chat\"\n              >\n                <PlusIcon className=\"w-4 h-4 mr-2\" />\n                New Chat\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto px-8 py-6\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {messages.map((msg) => (\n              <div\n                key={msg.id}\n                className={`flex items-start space-x-4 ${\n                  msg.role === 'user' ? 'justify-end' : ''\n                }`}\n                data-testid={`message-${msg.role}-${msg.id}`}\n              >\n                {msg.role === 'assistant' && (\n                  <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ml-[-6px] mr-[-6px] bg-[#1f61f0] pl-[0px] pr-[0px] pt-[0px] pb-[0px]\">\n                    <Bot className=\"w-5 h-5 text-white\" />\n                  </div>\n                )}\n                <div\n                  className=\"max-w-3xl p-4 rounded-xl ml-[8px] mr-[8px] text-[#424242] mt-[-3px] mb-[-3px] pl-[25px] pr-[25px] bg-[#8493ba38] pt-[20px] pb-[20px]\"\n                >\n                  <MarkdownRenderer content={msg.content} />\n                </div>\n                {msg.role === 'user' && (\n                  <div className=\"w-8 h-8 bg-slate-600 rounded-full flex items-center justify-center flex-shrink-0 ml-[6px] mr-[6px] pt-[0px] pb-[0px] mt-[6px] mb-[6px]\">\n                    <User className=\"w-5 h-5 text-white\" />\n                  </div>\n                )}\n              </div>\n            ))}\n\n            {/* Streaming message */}\n            {isStreaming && streamingMessage && (\n              <div className=\"flex items-start space-x-4\" data-testid=\"streaming-message\">\n                <div className=\"w-8 h-8 bg-brand-blue rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"w-5 h-5 text-white\" />\n                </div>\n                <div className=\"max-w-3xl p-4 rounded-xl bg-slate-100 text-slate-800\">\n                  <MarkdownRenderer content={streamingMessage} />\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <div className=\"w-2 h-2 bg-brand-blue rounded-full animate-pulse\" />\n                    <p className=\"text-xs text-slate-500\">AI is typing...</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Loading indicator for initial streaming */}\n            {((isStreaming && !streamingMessage) || shouldShowInitialStreaming) && (\n              <div className=\"flex items-start space-x-4\" data-testid=\"loading-message\">\n                <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ml-[-6px] mr-[-6px] bg-[#1f61f0] pl-[0px] pr-[0px] pt-[0px] pb-[0px]\">\n                  <Bot className=\"w-5 h-5 text-white\" />\n                </div>\n                <div className=\"max-w-3xl p-4 rounded-xl ml-[8px] mr-[8px] text-[#424242] mt-[-3px] mb-[-3px] pl-[25px] pr-[25px] bg-[#8493ba38] pt-[20px] pb-[20px]\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-[#1f61f0] rounded-full animate-bounce\" />\n                    <div className=\"w-2 h-2 bg-[#1f61f0] rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                    <div className=\"w-2 h-2 bg-[#1f61f0] rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                    <span className=\"text-sm text-slate-600 ml-2\">AI is thinking...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div ref={messagesEndRef} />\n          </div>\n        </div>\n\n        <InputSection \n          message={message}\n          onMessageChange={setMessage}\n          onSendMessage={handleSendMessage}\n          onQuickAction={handleQuickAction}\n        />\n      </main>\n    </div>\n  );\n}","size_bytes":15379},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/sidebar\";\nimport InputSection from \"@/components/input-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusIcon, Lightbulb, BarChart, BookOpen, Code } from \"lucide-react\";\n\nexport default function Home() {\n  const [activeNav, setActiveNav] = useState(\"home\");\n  const [message, setMessage] = useState(\"\");\n  const [isStartingChat, setIsStartingChat] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"Good Morning\";\n    if (hour < 18) return \"Good Afternoon\";\n    return \"Good Evening\";\n  };\n\n  const startNewChat = async (initialMessage: string) => {\n    if (!initialMessage.trim() || isStartingChat) return;\n\n    setIsStartingChat(true);\n\n    try {\n      const response = await fetch('/api/chat/new', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: initialMessage }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start chat');\n      }\n\n      const data = await response.json();\n      \n      if (data.conversationId) {\n        // Navigate immediately to the conversation page\n        setLocation(`/conversation/${data.conversationId}`);\n      } else {\n        throw new Error('No conversation ID received');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start new chat\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsStartingChat(false);\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (message.trim()) {\n      startNewChat(message);\n      setMessage(\"\");\n    }\n  };\n\n  const handleQuickAction = (action: string) => {\n    // Tools are activated but don't modify the input field text\n    // The tool selection will be handled visually through the UI state\n  };\n\n  const handlePromptClick = (promptText: string) => {\n    startNewChat(promptText);\n  };\n\n  const suggestedPrompts = [\n    {\n      icon: Lightbulb,\n      title: \"Creative Writing\",\n      description: \"Help me write a story, poem, or creative content\",\n      color: \"blue\"\n    },\n    {\n      icon: BarChart,\n      title: \"Data Analysis\",\n      description: \"Analyze data, create charts, or explain trends\",\n      color: \"green\"\n    },\n    {\n      icon: BookOpen,\n      title: \"Learning & Research\",\n      description: \"Explain concepts, research topics, or help study\",\n      color: \"purple\"\n    },\n    {\n      icon: Code,\n      title: \"Code & Programming\",\n      description: \"Write code, debug issues, or explain programming\",\n      color: \"orange\"\n    }\n  ];\n\n  const getColorClasses = (color: string) => {\n    const colors = {\n      blue: \"bg-blue-50 group-hover:bg-blue-100 text-blue-600\",\n      green: \"bg-green-50 group-hover:bg-green-100 text-green-600\",\n      purple: \"bg-purple-50 group-hover:bg-purple-100 text-purple-600\",\n      orange: \"bg-orange-50 group-hover:bg-orange-100 text-orange-600\"\n    };\n    return colors[color as keyof typeof colors] || colors.blue;\n  };\n\n  return (\n    <div className=\"flex h-screen\" data-testid=\"home-page\">\n      <Sidebar activeNav={activeNav} onNavChange={setActiveNav} />\n      <main className=\"flex-1 flex flex-col min-w-0\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-slate-200 px-8 py-6 pt-[6px] pb-[6px]\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h1 className=\"font-semibold text-[15px] text-[#122557]\" data-testid=\"greeting\">\n                  {getGreeting()}, {user?.firstName || user?.username || 'User'}\n                </h1>\n              </div>\n            </div>\n            <Button \n              className=\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-10 px-4 py-2 hover:bg-slate-700 font-normal text-[12px] pt-[8px] pb-[8px] pl-[21px] pr-[21px] bg-[#142236] text-[#fff2f2]\"\n              data-testid=\"button-new-chat\"\n            >\n              <PlusIcon className=\"w-4 h-4 mr-2\" />\n              New Chat\n            </Button>\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 px-8 py-8 overflow-y-auto\">\n          <div className=\"max-w-3xl mx-auto\">\n            {/* Welcome Message */}\n            <div className=\"text-center mb-12\">\n              <div className=\"w-20 h-20 brand-gradient rounded-full mx-auto mb-6 flex items-center justify-center opacity-10\">\n                <svg className=\"w-10 h-10 text-brand-blue\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                </svg>\n              </div>\n\n            </div>\n\n            {/* Suggested Prompts */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-[10px] mb-[10px]\">\n              {suggestedPrompts.map((prompt, index) => {\n                const Icon = prompt.icon;\n                return (\n                  <button\n                    key={index}\n                    onClick={() => handlePromptClick(prompt.description)}\n                    disabled={isStartingChat}\n                    className=\"text-left p-6 bg-white border border-slate-200 rounded-xl hover:border-brand-blue hover:shadow-md transition-all duration-150 group disabled:opacity-50 disabled:cursor-not-allowed pl-[20px] pr-[20px] pt-[18px] pb-[18px]\"\n                    data-testid={`button-prompt-${prompt.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center transition-colors duration-150 ${getColorClasses(prompt.color)}`}>\n                        {isStartingChat ? (\n                          <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                        ) : (\n                          <Icon className=\"w-5 h-5\" />\n                        )}\n                      </div>\n                      <div>\n                        <h3 className=\"text-slate-800 text-[14px] font-semibold mt-[2px] mb-[2px]\">{prompt.title}</h3>\n                        <p className=\"text-slate-600 text-[13px]\">{prompt.description}</p>\n                      </div>\n                    </div>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        <InputSection \n          message={message}\n          onMessageChange={setMessage}\n          onSendMessage={handleSendMessage}\n          onQuickAction={handleQuickAction}\n          disabled={isStartingChat}\n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":7359},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"search_server.py":{"content":"#!/usr/bin/env python3\n\nimport json\nimport sys\nimport asyncio\nimport os\nfrom typing import Dict, Any, Optional\nfrom exa_py import Exa\nfrom datetime import datetime, timedelta\n\nclass MCPServer:\n    def __init__(self):\n        api_key = os.getenv('EXA_API_KEY')\n        if not api_key:\n            raise ValueError(\"EXA_API_KEY environment variable is required\")\n        self.exa = Exa(api_key=api_key)\n        \n    async def handle_request(self, request: Dict[str, Any]) -> Dict[str, Any]:\n        method = request.get(\"method\")\n        \n        if method == \"initialize\":\n            return {\n                \"protocolVersion\": \"2024-11-05\",\n                \"capabilities\": {\n                    \"tools\": {}\n                },\n                \"serverInfo\": {\n                    \"name\": \"search-server\",\n                    \"version\": \"1.0.0\"\n                }\n            }\n        elif method == \"tools/list\":\n            return {\n                \"tools\": [\n                    {\n                        \"name\": \"web_search\",\n                        \"description\": \"Search the web for current information and content\",\n                        \"inputSchema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"query\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Search query\"\n                                },\n                                \"num_results\": {\n                                    \"type\": \"integer\",\n                                    \"description\": \"Number of results to return (1-10)\",\n                                    \"minimum\": 1,\n                                    \"maximum\": 10,\n                                    \"default\": 5\n                                }\n                            },\n                            \"required\": [\"query\"]\n                        }\n                    },\n                    {\n                        \"name\": \"deep_research\",\n                        \"description\": \"Perform comprehensive research on a topic with detailed analysis\",\n                        \"inputSchema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"topic\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Research topic or question\"\n                                },\n                                \"focus\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"Specific aspect to focus on (optional)\",\n                                    \"default\": \"general overview\"\n                                }\n                            },\n                            \"required\": [\"topic\"]\n                        }\n                    }\n                ]\n            }\n        elif method == \"tools/call\":\n            tool_name = request[\"params\"][\"name\"]\n            arguments = request[\"params\"][\"arguments\"]\n            \n            if tool_name == \"web_search\":\n                return await self.web_search(arguments)\n            elif tool_name == \"deep_research\":\n                return await self.deep_research(arguments)\n            else:\n                return {\"error\": {\"code\": -32601, \"message\": f\"Unknown tool: {tool_name}\"}}\n        else:\n            return {\"error\": {\"code\": -32601, \"message\": f\"Unknown method: {method}\"}}\n\n    async def web_search(self, args: Dict[str, Any]) -> Dict[str, Any]:\n        try:\n            query = args[\"query\"]\n            num_results = args.get(\"num_results\", 5)\n            \n            # Perform search with content\n            result = self.exa.search_and_contents(\n                query=query,\n                type=\"auto\",\n                num_results=num_results,\n                start_published_date=(datetime.now() - timedelta(days=365)).strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\"),\n                end_published_date=datetime.now().strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\"),\n                livecrawl=\"preferred\",\n                summary={\n                    \"query\": \"Generate concise summary with key information and takeaways\"\n                },\n                extras={\n                    \"links\": 1,\n                    \"image_links\": 0\n                }\n            )\n            \n            # Format results\n            formatted_results = []\n            for i, item in enumerate(result.results, 1):\n                formatted_result = f\"**Result {i}: {item.title}**\\n\"\n                formatted_result += f\"URL: {item.url}\\n\"\n                if hasattr(item, 'published_date') and item.published_date:\n                    formatted_result += f\"Published: {item.published_date}\\n\"\n                if hasattr(item, 'summary') and item.summary:\n                    formatted_result += f\"Summary: {item.summary}\\n\"\n                formatted_result += \"---\\n\"\n                formatted_results.append(formatted_result)\n            \n            content = f\"Search Results for: \\\"{query}\\\"\\n\\n\" + \"\\n\".join(formatted_results)\n            \n            return {\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": content\n                    }\n                ]\n            }\n            \n        except Exception as e:\n            return {\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": f\"Error performing web search: {str(e)}\"\n                    }\n                ],\n                \"isError\": True\n            }\n\n    async def deep_research(self, args: Dict[str, Any]) -> Dict[str, Any]:\n        try:\n            topic = args[\"topic\"]\n            focus = args.get(\"focus\", \"general overview\")\n            \n            # Create research task\n            research_query = f\"Research {topic} with focus on {focus}. Provide comprehensive analysis, key findings, recent developments, and authoritative sources.\"\n            \n            # Perform comprehensive search\n            result = self.exa.search_and_contents(\n                query=research_query,\n                type=\"auto\",\n                num_results=8,\n                start_published_date=(datetime.now() - timedelta(days=730)).strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\"),\n                end_published_date=datetime.now().strftime(\"%Y-%m-%dT%H:%M:%S.%fZ\"),\n                livecrawl=\"preferred\",\n                summary={\n                    \"query\": \"Generate comprehensive analysis with detailed insights, key findings, recent developments, and important context\"\n                },\n                extras={\n                    \"links\": 1,\n                    \"image_links\": 0\n                }\n            )\n            \n            # Format research findings\n            content = f\"**Deep Research Analysis: {topic}**\\n\"\n            content += f\"Focus Area: {focus}\\n\\n\"\n            \n            # Group results by relevance and recency\n            recent_results = []\n            comprehensive_results = []\n            \n            for item in result.results:\n                if hasattr(item, 'summary') and item.summary:\n                    formatted_item = {\n                        'title': item.title,\n                        'url': item.url,\n                        'summary': item.summary,\n                        'published_date': getattr(item, 'published_date', None)\n                    }\n                    \n                    # Categorize by recency (if published date available)\n                    if formatted_item['published_date']:\n                        try:\n                            pub_date = datetime.fromisoformat(formatted_item['published_date'].replace('Z', '+00:00'))\n                            if (datetime.now() - pub_date.replace(tzinfo=None)).days < 90:\n                                recent_results.append(formatted_item)\n                            else:\n                                comprehensive_results.append(formatted_item)\n                        except:\n                            comprehensive_results.append(formatted_item)\n                    else:\n                        comprehensive_results.append(formatted_item)\n            \n            # Add recent developments section\n            if recent_results:\n                content += \"## Recent Developments\\n\\n\"\n                for item in recent_results[:3]:\n                    content += f\"**{item['title']}**\\n\"\n                    content += f\"Source: {item['url']}\\n\"\n                    if item['published_date']:\n                        content += f\"Published: {item['published_date']}\\n\"\n                    content += f\"{item['summary']}\\n\\n---\\n\\n\"\n            \n            # Add comprehensive analysis section\n            if comprehensive_results:\n                content += \"## Comprehensive Analysis\\n\\n\"\n                for item in comprehensive_results[:5]:\n                    content += f\"**{item['title']}**\\n\"\n                    content += f\"Source: {item['url']}\\n\"\n                    if item['published_date']:\n                        content += f\"Published: {item['published_date']}\\n\"\n                    content += f\"{item['summary']}\\n\\n---\\n\\n\"\n            \n            # Add key sources section\n            content += \"## Key Sources\\n\\n\"\n            all_sources = recent_results + comprehensive_results\n            for i, item in enumerate(all_sources[:8], 1):\n                content += f\"{i}. [{item['title']}]({item['url']})\\n\"\n            \n            return {\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": content\n                    }\n                ]\n            }\n            \n        except Exception as e:\n            return {\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": f\"Error performing deep research: {str(e)}\"\n                    }\n                ],\n                \"isError\": True\n            }\n\nasync def main():\n    server = MCPServer()\n    \n    while True:\n        try:\n            line = input()\n            if not line.strip():\n                continue\n                \n            request = json.loads(line)\n            result = await server.handle_request(request)\n            \n            response = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": request.get(\"id\"),\n                \"result\": result\n            }\n            \n            print(json.dumps(response))\n            sys.stdout.flush()\n            \n        except EOFError:\n            break\n        except Exception as e:\n            error_response = {\n                \"jsonrpc\": \"2.0\",\n                \"id\": None,\n                \"error\": {\"code\": -32000, \"message\": str(e)}\n            }\n            print(json.dumps(error_response))\n            sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())","size_bytes":11015},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport session from 'express-session';\nimport connectPg from 'connect-pg-simple';\nimport type { Express, RequestHandler } from \"express\";\nimport { storage } from './storage';\nimport { signupSchema, loginSchema, type User } from '@shared/schema';\nimport { z } from 'zod';\n\n// Session configuration\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-key-for-development',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.session && req.session.userId) {\n    return next();\n  }\n  res.status(401).json({ error: 'Authentication required' });\n};\n\n// Authentication utilities\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// Extend session interface\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n    user: User;\n  }\n}","size_bytes":1585},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { type User, type SignupUser, type LoginUser } from '@shared/schema';\n\ninterface AuthResponse {\n  user: User;\n}\n\nexport function useAuth() {\n  const { data: authData, isLoading, error } = useQuery<AuthResponse>({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  return {\n    user: authData?.user,\n    isLoading,\n    isAuthenticated: !!authData?.user,\n    error,\n  };\n}\n\nexport function useSignup() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (userData: SignupUser): Promise<AuthResponse> => {\n      return await apiRequest('/api/auth/signup', 'POST', userData);\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/me'], data);\n    },\n  });\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (credentials: LoginUser): Promise<AuthResponse> => {\n      return await apiRequest('/api/auth/login', 'POST', credentials);\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData(['/api/auth/me'], data);\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/auth/logout', 'POST');\n    },\n    onSuccess: () => {\n      queryClient.setQueryData(['/api/auth/me'], null);\n      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n    },\n  });\n}","size_bytes":1608},"client/src/pages/auth.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { useSignup, useLogin } from '@/hooks/useAuth';\nimport { signupSchema, loginSchema } from '@shared/schema';\nimport { FaGoogle, FaApple, FaMicrosoft } from 'react-icons/fa';\n\ntype AuthMode = 'login' | 'signup';\n\n// Extend signup schema for confirm password\nconst signupFormSchema = signupSchema.extend({\n  confirmPassword: z.string().min(1, 'Please confirm your password'),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: ['confirmPassword'],\n});\n\ntype SignupFormData = z.infer<typeof signupFormSchema>;\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AuthPage() {\n  const [mode, setMode] = useState<AuthMode>('signup');\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const signupMutation = useSignup();\n  const loginMutation = useLogin();\n\n  const signupForm = useForm<SignupFormData>({\n    resolver: zodResolver(signupFormSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      firstName: '',\n      lastName: '',\n    },\n  });\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSignup = async (data: SignupFormData) => {\n    try {\n      const { confirmPassword, ...signupData } = data;\n      await signupMutation.mutateAsync(signupData);\n      toast({\n        title: 'Welcome to BeeBot!',\n        description: 'Your account has been created successfully.',\n      });\n      setLocation('/');\n    } catch (error: any) {\n      toast({\n        title: 'Signup Failed',\n        description: error.message || 'An error occurred during signup.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const onLogin = async (data: LoginFormData) => {\n    try {\n      await loginMutation.mutateAsync(data);\n      toast({\n        title: 'Welcome back!',\n        description: 'You have been logged in successfully.',\n      });\n      setLocation('/');\n    } catch (error: any) {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'Invalid email or password.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const isLoading = signupMutation.isPending || loginMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      {/* Auth form */}\n      <div className=\"w-full max-w-md p-8 bg-white rounded-lg shadow-sm border border-gray-200\" style={{ backgroundColor: '#5239cc12' }}>\n          {/* Logo */}\n          <div className=\"text-right mb-8\">\n            <h2 className=\"text-xl font-semibold text-gray-900 text-center\">BeeBot</h2>\n          </div>\n\n          {/* Mode switcher */}\n          <div className=\"flex mb-6 pl-[89px] pr-[89px]\">\n            <button\n              onClick={() => setMode('signup')}\n              className={`px-6 py-2 text-sm font-medium rounded-l-lg border transition-colors ${\n                mode === 'signup'\n                  ? 'bg-blue-600 text-white border-blue-600'\n                  : 'bg-white text-gray-600 border-gray-300 hover:bg-gray-50'\n              }`}\n            >\n              Sign Up\n            </button>\n            <button\n              onClick={() => setMode('login')}\n              className={`px-6 py-2 text-sm font-medium rounded-r-lg border-l-0 border transition-colors ${\n                mode === 'login'\n                  ? 'bg-blue-600 text-white border-blue-600'\n                  : 'bg-white text-gray-600 border-gray-300 hover:bg-gray-50'\n              }`}\n            >\n              Sign In\n            </button>\n          </div>\n\n          {/* Form */}\n          <div className=\"space-y-4\">\n            {mode === 'signup' ? (\n              <form onSubmit={signupForm.handleSubmit(onSignup)} className=\"space-y-4 ml-[12px] mr-[12px]\">\n                <div className=\"grid grid-cols-2 gap-4 text-[14px]\">\n                  <div>\n                    <Label htmlFor=\"firstName\" className=\"text-sm text-gray-700\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      placeholder=\"First name\"\n                      {...signupForm.register('firstName')}\n                      className=\"mt-1 border-gray-300\"\n                    />\n                    {signupForm.formState.errors.firstName && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.firstName.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\" className=\"text-sm text-gray-700\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      placeholder=\"Last name\"\n                      {...signupForm.register('lastName')}\n                      className=\"mt-1 border-gray-300\"\n                    />\n                    {signupForm.formState.errors.lastName && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {signupForm.formState.errors.lastName.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm text-gray-700\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    {...signupForm.register('email')}\n                    className=\"mt-1 border-gray-300\"\n                  />\n                  {signupForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {signupForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n\n\n                <div>\n                  <Label htmlFor=\"password\" className=\"text-sm text-gray-700\">Create Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create password\"\n                    {...signupForm.register('password')}\n                    className=\"mt-1 border-gray-300\"\n                  />\n                  {signupForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {signupForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"confirmPassword\" className=\"text-sm text-gray-700\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm password\"\n                    {...signupForm.register('confirmPassword')}\n                    className=\"mt-1 border-gray-300\"\n                  />\n                  {signupForm.formState.errors.confirmPassword && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {signupForm.formState.errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 py-3\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? 'Creating Account...' : 'Create Account'}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm text-gray-700\">Email Id</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...loginForm.register('email')}\n                    className=\"mt-1 border-gray-300\"\n                  />\n                  {loginForm.formState.errors.email && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"password\" className=\"text-sm text-gray-700\">Password</Label>\n                    <button type=\"button\" className=\"text-sm text-blue-600 hover:text-blue-500\">\n                      Forget Password?\n                    </button>\n                  </div>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter Password\"\n                    {...loginForm.register('password')}\n                    className=\"mt-1 border-gray-300\"\n                  />\n                  {loginForm.formState.errors.password && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {loginForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700 py-3\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? 'Signing In...' : 'Sign In'}\n                </Button>\n              </form>\n            )}\n\n            {/* Social login options */}\n            <div className=\"mt-8 grid grid-cols-3 gap-3\">\n              <Button variant=\"outline\" className=\"w-full p-3 border-gray-300\">\n                <FaGoogle className=\"w-4 h-4 text-gray-600\" />\n              </Button>\n              <Button variant=\"outline\" className=\"w-full p-3 border-gray-300\">\n                <FaApple className=\"w-4 h-4 text-gray-600\" />\n              </Button>\n              <Button variant=\"outline\" className=\"w-full p-3 border-gray-300\">\n                <FaMicrosoft className=\"w-4 h-4 text-gray-600\" />\n              </Button>\n            </div>\n\n            {/* Terms */}\n            <div className=\"mt-6 text-center text-xs text-gray-500\">\n              By signing up Business, I accept Company's{' '}\n              <button className=\"text-blue-600 hover:text-blue-500\">\n                Terms of use\n              </button>{' '}\n              &{' '}\n              <button className=\"text-blue-600 hover:text-blue-500\">\n                Privacy Policy\n              </button>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11009},"client/src/components/markdown-renderer.tsx":{"content":"import React from 'react';\n\ninterface MarkdownRendererProps {\n  content: string;\n  className?: string;\n}\n\nexport function MarkdownRenderer({ content, className = \"\" }: MarkdownRendererProps) {\n  // Parse markdown-like content into HTML\n  const parseMarkdown = (text: string): string => {\n    return text\n      // Headers\n      .replace(/^### (.*$)/gm, '<h3 class=\"text-lg font-semibold mb-3 mt-4 text-slate-800\">$1</h3>')\n      .replace(/^## (.*$)/gm, '<h2 class=\"text-xl font-semibold mb-3 mt-5 text-slate-800\">$1</h2>')\n      .replace(/^# (.*$)/gm, '<h1 class=\"text-2xl font-bold mb-4 mt-6 text-slate-800\">$1</h1>')\n      \n      // Bold text\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong class=\"font-semibold text-slate-800\">$1</strong>')\n      \n      // Italic text\n      .replace(/\\*(.*?)\\*/g, '<em class=\"italic text-slate-700\">$1</em>')\n      \n      // Code blocks\n      .replace(/```([\\s\\S]*?)```/g, '<pre class=\"bg-slate-100 border border-slate-200 rounded-lg p-4 my-4 overflow-x-auto\"><code class=\"text-sm text-slate-800 font-mono\">$1</code></pre>')\n      \n      // Inline code\n      .replace(/`(.*?)`/g, '<code class=\"bg-slate-100 text-slate-800 px-2 py-1 rounded text-sm font-mono\">$1</code>')\n      \n      // Bullet points\n      .replace(/^- (.*$)/gm, '<li class=\"ml-4 mb-1 text-slate-700\">• $1</li>')\n      \n      // Numbered lists\n      .replace(/^(\\d+)\\. (.*$)/gm, '<li class=\"ml-4 mb-1 text-slate-700\">$1. $2</li>')\n      \n      // Line breaks\n      .replace(/\\n\\n/g, '</p><p class=\"mb-3 text-slate-700 leading-relaxed\">')\n      .replace(/\\n/g, '<br />');\n  };\n\n  const htmlContent = parseMarkdown(content);\n  \n  // Wrap in paragraph tags if not already structured\n  const wrappedContent = htmlContent.startsWith('<h') || htmlContent.startsWith('<li') || htmlContent.startsWith('<pre')\n    ? htmlContent\n    : `<p class=\"mb-3 text-slate-700 leading-relaxed\">${htmlContent}</p>`;\n\n  return (\n    <div \n      className={`prose prose-sm max-w-none ${className}`}\n      dangerouslySetInnerHTML={{ __html: wrappedContent }}\n    />\n  );\n}","size_bytes":2046}}}